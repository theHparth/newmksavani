{"version":3,"sources":["app/views/admin/hospital/hospital-viewer/HospitalSendStockList.jsx","app/views/admin/hospital/hospital-viewer/HospitalStockInfo.js","app/views/admin/hospital/hospital-viewer/SellingListHospital.js","app/views/admin/hospital/hospital-viewer/Viewer.jsx","app/views/admin/stockOut/AllStockOut.js"],"names":["AllStockOutPerticularHospital","id","AllStockOut","HospitalStockInfo","palette","useTheme","bgError","error","main","bgPrimary","primary","bgSecondary","secondary","React","useState","searchText","setSearchText","useSelector","state","hospitalList","hospitalIndividualStockData","isLoading","dispatch","useDispatch","useEffect","hospitalStockInformation","rowsPerPage","setRowsPerPage","page","setPage","onSearch","value","onSearchValueChange","length","Box","width","overflow","TableHead","TableRow","TableCell","TableBody","slice","map","subscriber","index","align","hospitalName","stock_name","sx","px","totalQtyUser","minimumLimit","bgcolor","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onPageChange","event","newPage","onRowsPerPageChange","target","PreviousSellingEntryManage","expanded","setExpanded","hospitalSellingData","hospitalSellingInfo","AccordionSummary","Accordion","onChange","panel","isExpanded","expandIcon","moment","createdAt","format","todaySellingData","AccordionDetails","style","backgroundColor","totalBox","totalQtyInOneBox","price","Container","styled","theme","margin","breakpoints","down","marginBottom","tabList","CustomerViewer","tabIndex","setTabIndex","useParams","className","routeSegments","name","path","Tabs","mt","e","indicatorColor","textColor","item","ind","Tab","label","textTransform","Divider","mb","HospitalSendStockList","SellingListHospital","AllStockOutTrueStatus","hospitalDa","setHospitalDa","shouldOpenEditorDialog","setShouldOpenEditorDialog","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","info","setInfo","handleDialogClose","searchDate","setSearchDate","location","useLocation","privatrRoute","searchStatus","pathname","stockOutList","allStockOutData","showAlert","alertType","alertText","allStockOutDatas","dateProjection","onSearchDate","title","invoiceNum","substring","variant","color","onClick","setEditData","to","hospitalId","_id","stockOutDetail","priceForUser","messageForHospital","open","onConfirmDialogClose","onYesClick","deleteData","then","text","handleClose","invoiceInfo","isOpen","typeSeverity","alrtTextToShow"],"mappings":"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","file":"static/js/15.54842c90.chunk.js","sourcesContent":["import AllStockOutTrueStatus from '../../stockOut/AllStockOut'\r\n\r\nconst AllStockOutPerticularHospital = ({ id }) => {\r\n    return (\r\n        <div>\r\n            <AllStockOutTrueStatus id={id} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllStockOutPerticularHospital\r\n","import { Box, useTheme } from '@mui/system'\r\nimport {\r\n    ContainerTable,\r\n    StyledTable,\r\n    StockAlert,\r\n    SearchBox,\r\n    LodingShow,\r\n    H1Alert,\r\n} from 'app/components'\r\nimport {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TablePagination,\r\n} from '@mui/material'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { hospitalStockInformation } from 'app/redux/actions/admin/HospitalActions'\r\n\r\nconst HospitalStockInfo = ({ id }) => {\r\n    const { palette } = useTheme()\r\n    const bgError = palette.error.main\r\n    const bgPrimary = palette.primary.main\r\n    const bgSecondary = palette.secondary.main\r\n\r\n    // search for all\r\n\r\n    let [searchText, setSearchText] = React.useState('')\r\n\r\n    const handleChangeSearch = (value) => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    // const { id } = useParams()\r\n    const { hospitalIndividualStockData = [], isLoading } = useSelector(\r\n        (state) => state.hospitalList\r\n    )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        var state = { id, searchText }\r\n        dispatch(hospitalStockInformation(state))\r\n        // eslint-disable-next-line\r\n    }, [searchText, id])\r\n\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n    return (\r\n        <ContainerTable>\r\n            <SearchBox\r\n                onSearch={handleChangeSearch}\r\n                onSearchValueChange={searchText}\r\n            />\r\n            {isLoading && <LodingShow />}\r\n            {hospitalIndividualStockData.length === 0 ? (\r\n                <H1Alert />\r\n            ) : (\r\n                <Box width=\"100%\" overflow=\"auto\">\r\n                    <StyledTable>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Hospital Name</TableCell>\r\n                                <TableCell>Stock Name</TableCell>\r\n                                <TableCell>Totoal Qty.</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {hospitalIndividualStockData\r\n                                .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                )\r\n                                .map((subscriber, index) => (\r\n                                    <TableRow key={index}>\r\n                                        <TableCell align=\"left\">\r\n                                            {subscriber.hospitalName}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {subscriber.stock_name}\r\n                                        </TableCell>\r\n                                        {/* <TableCell>\r\n                                            {subscriber.totalQtyUser}\r\n                                        </TableCell> */}\r\n                                        <TableCell\r\n                                            sx={{ px: 0 }}\r\n                                            align=\"left\"\r\n                                            // colSpan={2}\r\n                                        >\r\n                                            {subscriber.totalQtyUser ? (\r\n                                                subscriber.totalQtyUser <\r\n                                                subscriber.minimumLimit ? (\r\n                                                    <StockAlert\r\n                                                        bgcolor={bgSecondary}\r\n                                                    >\r\n                                                        {\r\n                                                            subscriber.totalQtyUser\r\n                                                        }{' '}\r\n                                                        available\r\n                                                    </StockAlert>\r\n                                                ) : (\r\n                                                    <StockAlert\r\n                                                        bgcolor={bgPrimary}\r\n                                                    >\r\n                                                        {\r\n                                                            subscriber.totalQtyUser\r\n                                                        }{' '}\r\n                                                        available\r\n                                                    </StockAlert>\r\n                                                )\r\n                                            ) : (\r\n                                                <StockAlert bgcolor={bgError}>\r\n                                                    out of stock\r\n                                                </StockAlert>\r\n                                            )}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                        </TableBody>\r\n                    </StyledTable>\r\n\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={hospitalIndividualStockData.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default HospitalStockInfo\r\n","import Accordion from '@mui/material/Accordion'\r\nimport AccordionDetails from '@mui/material/AccordionDetails'\r\nimport AccordionSummary from '@mui/material/AccordionSummary'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { Box } from '@mui/system'\r\nimport moment from 'moment'\r\nimport {\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    Heading,\r\n    SecondaryHeading,\r\n    LodingShow,\r\n    H1Alert,\r\n} from 'app/components'\r\nimport {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TablePagination,\r\n} from '@mui/material'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useEffect } from 'react'\r\n\r\nimport { hospitalSellingInfo } from 'app/redux/actions/admin/HospitalActions'\r\n\r\nconst PreviousSellingEntryManage = ({ id }) => {\r\n    // for panel setup\r\n    const [expanded, setExpanded] = React.useState(false)\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false)\r\n    }\r\n\r\n    // for page setup\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    let { hospitalSellingData = [], isLoading } = useSelector(\r\n        (state) => state.hospitalList\r\n    )\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(hospitalSellingInfo({ id }))\r\n        setExpanded(false)\r\n    }, [dispatch, id])\r\n    return (\r\n        <ContainerTable>\r\n            {/* date chooser from--------FROM---------- */}\r\n            {/* <SearchBox\r\n                    onSearch={handleChangeSearch}\r\n                    onSearchValueChange={searchText}\r\n                />\r\n                <DateChoose dateProjection={(state) => setSearchDate(state)} /> */}\r\n            {isLoading && <LodingShow />}\r\n\r\n            {hospitalSellingData.length === 0 ? (\r\n                <H1Alert />\r\n            ) : (\r\n                <SimpleCard>\r\n                    <Box width=\"100%\">\r\n                        <AccordionSummary\r\n                            aria-controls=\"panel1bh-content\"\r\n                            id=\"panel1bh-header\"\r\n                        >\r\n                            <Heading>Seeling date</Heading>\r\n                            <SecondaryHeading>Total Items</SecondaryHeading>\r\n                        </AccordionSummary>\r\n                        {/* data print start from here*/}\r\n                        {hospitalSellingData\r\n                            .slice(\r\n                                page * rowsPerPage,\r\n                                page * rowsPerPage + rowsPerPage\r\n                            )\r\n                            .map((subscriber, index) => (\r\n                                <Accordion\r\n                                    expanded={expanded === `panel${index}`}\r\n                                    onChange={handleChange(`panel${index}`)}\r\n                                    key={index}\r\n                                >\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMoreIcon />}\r\n                                        aria-controls=\"panel2bh-content\"\r\n                                        id=\"panel2bh-header\"\r\n                                    >\r\n                                        <Heading>\r\n                                            {' '}\r\n                                            {moment(\r\n                                                subscriber.createdAt\r\n                                            ).format('MMM Do, YYYY')}\r\n                                        </Heading>\r\n                                        <SecondaryHeading>\r\n                                            {subscriber.todaySellingData.length}\r\n                                        </SecondaryHeading>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails\r\n                                        style={{ backgroundColor: '#F5F5F5' }}\r\n                                    >\r\n                                        <StyledTable>\r\n                                            <TableHead\r\n                                                style={{\r\n                                                    backgroundColor: '#EBF5FB',\r\n                                                }}\r\n                                            >\r\n                                                <TableRow>\r\n                                                    <TableCell>\r\n                                                        Stock Name\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        Total Qty\r\n                                                    </TableCell>\r\n                                                    <TableCell>Price</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {subscriber.todaySellingData.map(\r\n                                                    (subscriber, index) => (\r\n                                                        <TableRow key={index}>\r\n                                                            <TableCell>\r\n                                                                {\r\n                                                                    subscriber.stock_name\r\n                                                                }\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                {subscriber.totalBox *\r\n                                                                    subscriber.totalQtyInOneBox}\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                ${' '}\r\n                                                                {subscriber.price\r\n                                                                    ? subscriber.price\r\n                                                                    : 0}\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                )}\r\n                                            </TableBody>\r\n                                        </StyledTable>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            ))}\r\n\r\n                        <TablePagination\r\n                            sx={{ px: 2 }}\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={hospitalSellingData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </Box>\r\n                </SimpleCard>\r\n            )}\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default PreviousSellingEntryManage\r\n","import React, { useState } from 'react'\r\nimport { Divider, Tab, Tabs } from '@mui/material'\r\nimport { Breadcrumb } from 'app/components'\r\nimport HospitalSendStockList from './HospitalSendStockList'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport HospitalStockInfo from './HospitalStockInfo'\r\nimport SellingListHospital from './SellingListHospital'\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst CustomerViewer = () => {\r\n    const [tabIndex, setTabIndex] = useState(0)\r\n    const { id } = useParams()\r\n    const handleTabChange = (e, value) => {\r\n        setTabIndex(value)\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Hospital List', path: '/allHospitals' },\r\n                        { name: 'Table' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Tabs\r\n                sx={{ mt: 2 }}\r\n                value={tabIndex}\r\n                onChange={handleTabChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n            >\r\n                {tabList.map((item, ind) => (\r\n                    <Tab\r\n                        key={ind}\r\n                        value={ind}\r\n                        label={item}\r\n                        sx={{ textTransform: 'capitalize' }}\r\n                    />\r\n                ))}\r\n            </Tabs>\r\n            <Divider sx={{ mb: '24px' }} />\r\n\r\n            {tabIndex === 0 && <HospitalStockInfo id={id} />}\r\n            {tabIndex === 1 && <HospitalSendStockList id={id} />}\r\n            {tabIndex === 2 && <SellingListHospital id={id} />}\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst tabList = ['Stock Info.', 'Invoices', 'Selling List']\r\n\r\nexport default CustomerViewer\r\n","import Accordion from '@mui/material/Accordion'\r\nimport AccordionDetails from '@mui/material/AccordionDetails'\r\nimport AccordionSummary from '@mui/material/AccordionSummary'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { Box } from '@mui/system'\r\nimport { useLocation, Link } from 'react-router-dom' // my import\r\nimport {\r\n    SearchBox,\r\n    Breadcrumb,\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    Heading,\r\n    SecondaryHeading,\r\n    ThirdHeading,\r\n    DateChoose,\r\n    InvoiceDetails,\r\n    MyAlert,\r\n    LodingShow,\r\n    H1Alert,\r\n} from 'app/components'\r\nimport {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    TablePagination,\r\n    Button,\r\n} from '@mui/material'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ConfirmationDialog from 'app/components/ConfirmationDialog/ConfirmationDialog'\r\n\r\nimport {\r\n    allStockOutDatas,\r\n    setEditData,\r\n    deleteData,\r\n} from 'app/redux/actions/admin/StockOutAction'\r\n\r\nconst AllStockOutTrueStatus = ({ id }) => {\r\n    // for printing and deleting pperpose\r\n    const [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n        useState(false)\r\n    const [info, setInfo] = useState()\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n        setShouldOpenConfirmationDialog(false)\r\n        // dispatch(getHospitalsData())\r\n    }\r\n    const handleDeleteUser = (hospitalId) => {\r\n        setHospitalDa(hospitalId)\r\n        setShouldOpenConfirmationDialog(true)\r\n    }\r\n\r\n    const handleConfirmationResponse = () => {\r\n        dispatch(deleteData(hospitalDa)).then(() => {\r\n            handleDialogClose()\r\n            setExpanded(false)\r\n        })\r\n        dispatch(allStockOutDatas({ searchStatus: false }))\r\n    }\r\n    // search for all\r\n    let [searchText, setSearchText] = React.useState('')\r\n\r\n    const handleChangeSearch = (value) => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    // for date search\r\n    let [searchDate, setSearchDate] = React.useState({})\r\n\r\n    // for pagination purposes\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(25)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n    // for panel setup\r\n    const [expanded, setExpanded] = React.useState(false)\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false)\r\n    }\r\n\r\n    const location = useLocation()\r\n\r\n    var privatrRoute = false\r\n    var searchStatus = true\r\n    if (location.pathname === '/pendingStockOut') {\r\n        searchStatus = false\r\n        privatrRoute = true\r\n    }\r\n\r\n    let {\r\n        allStockOutData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n        isLoading,\r\n    } = useSelector((state) => state.stockOutList)\r\n    // isLoading = true\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     setSearchDate({})\r\n    // }, [privatrRoute])\r\n\r\n    useEffect(() => {\r\n        var state = { searchText, searchDate, id, searchStatus }\r\n        dispatch(allStockOutDatas(state))\r\n        setExpanded(false)\r\n        // eslint-disable-next-line\r\n    }, [dispatch, searchText, searchDate, searchStatus])\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\r\n    //         shouldOpenConfirmationDialog,\r\n    //         'shouldOpenConfirmationDialog'\r\n    //     )\r\n    //     if (shouldOpenConfirmationDialog) {\r\n    //         isLoading = false\r\n    //     }\r\n    // }, [shouldOpenConfirmationDialog])\r\n    return (\r\n        <ContainerTable>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Stock out form', path: '/stockOutForm' },\r\n                        { name: 'Form' },\r\n                    ]}\r\n                />\r\n                {/* date chooser from--------FROM---------- */}\r\n                <SearchBox\r\n                    onSearch={handleChangeSearch}\r\n                    onSearchValueChange={searchText}\r\n                />\r\n                <DateChoose\r\n                    dateProjection={(state) => setSearchDate(state)}\r\n                    onSearchDate={searchDate}\r\n                />\r\n            </div>\r\n            {isLoading && <LodingShow />}\r\n\r\n            {allStockOutData.length === 0 ? (\r\n                <H1Alert />\r\n            ) : (\r\n                <SimpleCard title=\"Stock out data\">\r\n                    <Box width=\"100%\">\r\n                        <AccordionSummary\r\n                            aria-controls=\"panel1bh-content\"\r\n                            id=\"panel1bh-header\"\r\n                        >\r\n                            <Heading>Invoice No</Heading>\r\n                            <SecondaryHeading>Hospital Name</SecondaryHeading>\r\n                            <ThirdHeading>Date</ThirdHeading>\r\n                        </AccordionSummary>\r\n                        {/* data print start from here*/}\r\n                        {allStockOutData\r\n                            .slice(\r\n                                page * rowsPerPage,\r\n                                page * rowsPerPage + rowsPerPage\r\n                            )\r\n                            .map((subscriber, index) => (\r\n                                <Accordion\r\n                                    expanded={expanded === `panel${index}`}\r\n                                    onChange={handleChange(`panel${index}`)}\r\n                                    key={index}\r\n                                >\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMoreIcon />}\r\n                                        aria-controls=\"panel2bh-content\"\r\n                                        id=\"panel2bh-header\"\r\n                                    >\r\n                                        <Heading>\r\n                                            {subscriber.invoiceNum}\r\n                                        </Heading>\r\n                                        <SecondaryHeading>\r\n                                            {subscriber.hospitalName}\r\n                                        </SecondaryHeading>\r\n                                        <ThirdHeading>\r\n                                            {/* {moment(subscriber.createdAt).format(\r\n                                            'MM-DD-YYYY'\r\n                                        )} */}\r\n                                            {subscriber.createdAt &&\r\n                                                subscriber.createdAt.substring(\r\n                                                    0,\r\n                                                    10\r\n                                                )}\r\n                                        </ThirdHeading>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails\r\n                                        style={{ backgroundColor: '#F5F5F5' }}\r\n                                    >\r\n                                        <StyledTable>\r\n                                            <TableHead\r\n                                                style={{\r\n                                                    backgroundColor: '#EBF5FB',\r\n                                                }}\r\n                                            >\r\n                                                <TableRow>\r\n                                                    <TableCell>\r\n                                                        Stock Name\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        Total Qty\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        Price to show\r\n                                                    </TableCell>\r\n\r\n                                                    <TableCell align=\"right\">\r\n                                                        {privatrRoute && (\r\n                                                            <>\r\n                                                                <Button\r\n                                                                    variant=\"outlined\"\r\n                                                                    color=\"success\"\r\n                                                                    onClick={() =>\r\n                                                                        dispatch(\r\n                                                                            setEditData(\r\n                                                                                subscriber\r\n                                                                            )\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <Link\r\n                                                                        to={`/stockOutForm`}\r\n                                                                    >\r\n                                                                        Edit\r\n                                                                    </Link>\r\n                                                                </Button>\r\n                                                                {/* <TableCell></TableCell> */}\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"error\"\r\n                                                                    onClick={() =>\r\n                                                                        handleDeleteUser(\r\n                                                                            subscriber._id\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    Delete\r\n                                                                </Button>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </TableCell>\r\n                                                    {/* TO PRINT */}\r\n                                                    <TableCell align=\"center\">\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => {\r\n                                                                setShouldOpenEditorDialog(\r\n                                                                    true\r\n                                                                )\r\n                                                                setInfo(\r\n                                                                    subscriber\r\n                                                                )\r\n                                                            }}\r\n                                                        >\r\n                                                            <Icon color=\"primary\">\r\n                                                                print\r\n                                                            </Icon>\r\n                                                        </Button>\r\n                                                    </TableCell>\r\n                                                    {/* PRINT COMPLETE */}\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {subscriber.stockOutDetail.map(\r\n                                                    (subscriber, index) => (\r\n                                                        <TableRow key={index}>\r\n                                                            <TableCell>\r\n                                                                {\r\n                                                                    subscriber.stock_name\r\n                                                                }\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                {subscriber.totalBox *\r\n                                                                    subscriber.totalQtyInOneBox}\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                ${' '}\r\n                                                                {subscriber.priceForUser\r\n                                                                    ? subscriber.priceForUser\r\n                                                                    : 0}\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                )}\r\n                                                {subscriber.messageForHospital && (\r\n                                                    <TableCell>\r\n                                                        Note :{' '}\r\n                                                        {\r\n                                                            subscriber.messageForHospital\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                )}\r\n                                            </TableBody>\r\n                                        </StyledTable>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            ))}\r\n                        {shouldOpenConfirmationDialog && (\r\n                            <ConfirmationDialog\r\n                                open={shouldOpenConfirmationDialog}\r\n                                onConfirmDialogClose={handleDialogClose}\r\n                                onYesClick={handleConfirmationResponse}\r\n                                text=\"Are you sure to delete?\"\r\n                            />\r\n                        )}\r\n                        {shouldOpenEditorDialog && (\r\n                            <InvoiceDetails\r\n                                handleClose={handleDialogClose}\r\n                                open={shouldOpenEditorDialog}\r\n                                invoiceInfo={info}\r\n                            />\r\n                        )}\r\n                        <TablePagination\r\n                            sx={{ px: 2 }}\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={allStockOutData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                        {showAlert ? (\r\n                            <MyAlert\r\n                                isOpen={showAlert}\r\n                                typeSeverity={alertType}\r\n                                alrtTextToShow={\r\n                                    privatrRoute\r\n                                        ? 'Stock activated successfully'\r\n                                        : alertText\r\n                                }\r\n                            />\r\n                        ) : null}\r\n                    </Box>\r\n                </SimpleCard>\r\n            )}\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default AllStockOutTrueStatus\r\n"],"sourceRoot":""}