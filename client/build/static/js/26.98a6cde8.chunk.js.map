{"version":3,"sources":["app/views/admin/stock/HandleStock.jsx","app/views/admin/stock/AllStock.js"],"names":["StockEditDialog","uid","open","handleClose","useSelector","x","stockList","alertType","showAlert","clearValues","isEditing","alertText","description","minimumLimit","_id","stock_name","useState","id","newStock","setNewStock","dispatch","useDispatch","cancleWithClean","clearValueStock","useEffect","handleInput","e","name","target","value","Dialog","onClose","Box","p","sx","mb","onSubmit","preventDefault","edit","add","Grid","container","spacing","item","sm","xs","type","onChange","validators","label","errorMessages","Button","variant","color","onClick","isOpen","typeSeverity","alrtTextToShow","AllStock","hospitalDa","setHospitalDa","shouldOpenEditorDialog","setShouldOpenEditorDialog","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","state","stockData","isLoading","React","searchText","setSearchText","getAllData","location","useLocation","pathname","privatrRoute","filter","data","stockStatus","handleDialogClose","handleDeleteUser","hospitalId","palette","useTheme","bgError","error","main","bgPrimary","primary","bgSecondary","secondary","bgSuccess","success","rowsPerPage","setRowsPerPage","page","setPage","onSearch","onSearchValueChange","length","undefined","title","width","overflow","TableHead","TableRow","TableCell","align","TableBody","slice","map","subscriber","index","price","totalQty","px","bgcolor","setEditData","Icon","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onPageChange","event","newPage","onRowsPerPageChange","HandleStock","ConfirmationDialog","onConfirmDialogClose","onYesClick","deleteData","then","text"],"mappings":"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","file":"static/js/26.98a6cde8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Dialog, Button, Grid } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { MyAlert, TextField, FormHandlerBox } from 'app/components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n    edit,\r\n    add,\r\n    clearValueStock,\r\n} from 'app/redux/actions/admin/StockActions'\r\n\r\nconst StockEditDialog = ({ uid, open, handleClose }) => {\r\n    const {\r\n        alertType,\r\n        showAlert,\r\n        clearValues,\r\n\r\n        isEditing,\r\n        alertText,\r\n        description,\r\n        minimumLimit,\r\n        _id,\r\n        stock_name,\r\n    } = useSelector((x) => x.stockList)\r\n\r\n    const [newStock, setNewStock] = useState({\r\n        id: _id,\r\n        description: description,\r\n        minimumLimit: minimumLimit,\r\n        stock_name: stock_name,\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n    const cancleWithClean = () => {\r\n        handleClose()\r\n        dispatch(clearValueStock())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clearValues) {\r\n            cancleWithClean()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [clearValues])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (isEditing) {\r\n            dispatch(edit(newStock))\r\n        } else {\r\n            dispatch(add(newStock))\r\n        }\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        setNewStock({\r\n            ...newStock,\r\n            [name]: value,\r\n        })\r\n    }\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                {isEditing ? (\r\n                    <H4 sx={{ mb: '20px' }}>Update Stock</H4>\r\n                ) : (\r\n                    <H4 sx={{ mb: '20px' }}>Add new stock</H4>\r\n                )}\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"stock_name\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={newStock.stock_name}\r\n                                validators={['required']}\r\n                                label=\"Stock Name\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"description\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={newStock.description}\r\n                                validators={['required']}\r\n                                label=\"Description\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"minimumLimit\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={newStock.minimumLimit}\r\n                                validators={['required']}\r\n                                label=\"Minimum limit to show warning\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormHandlerBox>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={cancleWithClean}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </FormHandlerBox>\r\n                </ValidatorForm>\r\n            </Box>\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={alertText}\r\n                />\r\n            ) : null}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default StockEditDialog\r\n","import {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    TablePagination,\r\n    Button,\r\n} from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    StockAlert,\r\n    StyledButton,\r\n    MyAlert,\r\n    SearchBox,\r\n    LodingShow,\r\n} from 'app/components'\r\nimport ConfirmationDialog from 'app/components/ConfirmationDialog/ConfirmationDialog'\r\n\r\nimport { useLocation } from 'react-router-dom'\r\nimport HandleStock from './HandleStock'\r\nimport {\r\n    getAllData,\r\n    setEditData,\r\n    deleteData,\r\n} from 'app/redux/actions/admin/StockActions'\r\n\r\nconst AllStock = () => {\r\n    const [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n        useState(false)\r\n\r\n    let {\r\n        stockData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n        isLoading,\r\n    } = useSelector((state) => state.stockList)\r\n    const dispatch = useDispatch()\r\n\r\n    // search for all\r\n    let [searchText, setSearchText] = React.useState('')\r\n\r\n    const handleChangeSearch = (value) => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        // var state = { searchText }\r\n        dispatch(getAllData(searchText))\r\n    }, [dispatch, searchText])\r\n\r\n    const location = useLocation()\r\n    // auto open add new stock\r\n    useEffect(() => {\r\n        if (location.pathname === '/allStock/new') {\r\n            setShouldOpenEditorDialog(true)\r\n        }\r\n    }, [location.pathname])\r\n\r\n    var privatrRoute = false\r\n    if (location.pathname === '/allStockD') {\r\n        privatrRoute = true\r\n    }\r\n\r\n    stockData = stockData.filter((data) => {\r\n        return privatrRoute ? !data.stockStatus : data.stockStatus\r\n    })\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n        setShouldOpenConfirmationDialog(false)\r\n        dispatch(getAllData())\r\n    }\r\n    const handleDeleteUser = (hospitalId) => {\r\n        setHospitalDa(hospitalId)\r\n        setShouldOpenConfirmationDialog(true)\r\n    }\r\n\r\n    const handleConfirmationResponse = () => {\r\n        dispatch(deleteData(hospitalDa)).then(() => {\r\n            handleDialogClose()\r\n        })\r\n        dispatch(getAllData())\r\n    }\r\n\r\n    const { palette } = useTheme()\r\n    const bgError = palette.error.main\r\n    const bgPrimary = palette.primary.main\r\n    const bgSecondary = palette.secondary.main\r\n    const bgSuccess = palette.success.main\r\n\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    return (\r\n        <ContainerTable>\r\n            {!privatrRoute && (\r\n                <Button\r\n                    sx={{ mb: 2 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setShouldOpenEditorDialog(true)}\r\n                >\r\n                    Add New Stock\r\n                </Button>\r\n            )}\r\n            <SearchBox\r\n                onSearch={handleChangeSearch}\r\n                onSearchValueChange={searchText}\r\n            />\r\n\r\n            {isLoading && <LodingShow />}\r\n            {stockData.length === 0 || stockData === undefined ? (\r\n                <h1>No stock data found..!!</h1>\r\n            ) : (\r\n                <SimpleCard title=\"Stocks List\">\r\n                    <Box width=\"100%\" overflow=\"auto\">\r\n                        <StyledTable>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\">\r\n                                        Stock Name\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Description\r\n                                    </TableCell>\r\n                                    <TableCell>total value</TableCell>\r\n                                    <TableCell>Individual Price</TableCell>\r\n\r\n                                    <TableCell> Total Qty </TableCell>\r\n\r\n                                    {/* <TableCell>Address</TableCell>\r\n                        <TableCell align=\"center\">Pincode</TableCell> */}\r\n                                    {!privatrRoute && (\r\n                                        <TableCell align=\"center\">\r\n                                            Edit\r\n                                        </TableCell>\r\n                                    )}\r\n                                    <TableCell>Delete</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {stockData\r\n                                    .slice(\r\n                                        page * rowsPerPage,\r\n                                        page * rowsPerPage + rowsPerPage\r\n                                    )\r\n                                    .map((subscriber, index) => (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell align=\"center\">\r\n                                                {subscriber.stock_name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                {subscriber.description}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                ${' '}\r\n                                                {subscriber.price\r\n                                                    ? subscriber.price *\r\n                                                      subscriber.totalQty\r\n                                                    : 0}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                ${' '}\r\n                                                {subscriber.price\r\n                                                    ? subscriber.price\r\n                                                    : 0}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell\r\n                                                sx={{ px: 0 }}\r\n                                                align=\"left\"\r\n                                                // colSpan={2}\r\n                                            >\r\n                                                {subscriber.totalQty ? (\r\n                                                    <StockAlert\r\n                                                        bgcolor={\r\n                                                            subscriber.totalQty <\r\n                                                            subscriber.minimumLimit\r\n                                                                ? bgSecondary\r\n                                                                : bgPrimary\r\n                                                        }\r\n                                                    >\r\n                                                        {subscriber.totalQty}{' '}\r\n                                                        available\r\n                                                    </StockAlert>\r\n                                                ) : (\r\n                                                    <StockAlert\r\n                                                        bgcolor={bgError}\r\n                                                    >\r\n                                                        out of stock\r\n                                                    </StockAlert>\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            {!privatrRoute && (\r\n                                                <TableCell align=\"center\">\r\n                                                    <StyledButton\r\n                                                        // variant=\"contained\"\r\n                                                        sx={{\r\n                                                            color: bgSuccess,\r\n                                                        }}\r\n                                                        onClick={() => {\r\n                                                            dispatch(\r\n                                                                setEditData(\r\n                                                                    subscriber\r\n                                                                )\r\n                                                            )\r\n                                                            setShouldOpenEditorDialog(\r\n                                                                true\r\n                                                            )\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon color=\"primary\">\r\n                                                            edit\r\n                                                        </Icon>\r\n                                                    </StyledButton>\r\n                                                </TableCell>\r\n                                            )}\r\n                                            <TableCell>\r\n                                                {/* <StyledButton\r\n                                                    sx={{ color: bgError }}\r\n                                                    onClick={() =>\r\n                                                        handleDeleteUser(\r\n                                                            subscriber._id\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </StyledButton> */}\r\n\r\n                                                {privatrRoute ? (\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"success\"\r\n                                                        onClick={() =>\r\n                                                            handleDeleteUser(\r\n                                                                subscriber._id\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        Active\r\n                                                    </Button>\r\n                                                ) : (\r\n                                                    <Button\r\n                                                        variant=\"outlined\"\r\n                                                        color=\"error\"\r\n                                                        onClick={() =>\r\n                                                            handleDeleteUser(\r\n                                                                subscriber._id\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        Deactive\r\n                                                    </Button>\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </StyledTable>\r\n\r\n                        <TablePagination\r\n                            sx={{ px: 2 }}\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={stockData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                        {shouldOpenEditorDialog && (\r\n                            <HandleStock\r\n                                handleClose={handleDialogClose}\r\n                                open={shouldOpenEditorDialog}\r\n                            />\r\n                        )}\r\n                        {shouldOpenConfirmationDialog && (\r\n                            <ConfirmationDialog\r\n                                open={shouldOpenConfirmationDialog}\r\n                                onConfirmDialogClose={handleDialogClose}\r\n                                onYesClick={handleConfirmationResponse}\r\n                                text=\"Are you sure to delete?\"\r\n                            />\r\n                        )}\r\n                    </Box>\r\n                    {showAlert ? (\r\n                        <MyAlert\r\n                            isOpen={showAlert}\r\n                            typeSeverity={alertType}\r\n                            alrtTextToShow={\r\n                                privatrRoute\r\n                                    ? 'Stock activated successfully'\r\n                                    : alertText\r\n                            }\r\n                        />\r\n                    ) : null}\r\n                </SimpleCard>\r\n            )}\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default AllStock\r\n"],"sourceRoot":""}