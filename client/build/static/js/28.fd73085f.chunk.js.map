{"version":3,"sources":["app/views/admin/vendor/HandleVendor.jsx","app/views/admin/vendor/AllVendor.js"],"names":["MemberEditorDialog","uid","open","handleClose","useSelector","x","vendorList","alertType","showAlert","clearValues","isEditing","alertText","address","contect","email","pincode","vendor_name","_id","useState","id","state","setState","dispatch","useDispatch","cancleWithClean","clearValue","useEffect","handleHospitalInput","e","name","target","value","Dialog","onClose","Box","p","sx","mb","onSubmit","preventDefault","edit","add","Grid","container","spacing","item","sm","xs","type","onChange","validators","label","errorMessages","Button","variant","color","onClick","isOpen","typeSeverity","alrtTextToShow","CustomerList","hospitalDa","setHospitalDa","shouldOpenEditorDialog","setShouldOpenEditorDialog","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","location","useLocation","pathname","handleDialogClose","getAllVendor","vendorData","isLoading","privatrRoute","filter","data","vendorStatus","palette","useTheme","textMuted","text","secondary","bgSuccess","success","main","columns","options","customBodyRenderLite","dataIndex","user","Avatar","width","height","src","imgUrl","ml","fontSize","flexGrow","hospitalId","setEditData","Icon","to","IconButton","overflow","minWidth","title","filterType","responsive","selectableRows","elevation","rowsPerPageOptions","customSearchRender","searchText","handleSearch","hideSearch","Grow","appear","in","timeout","TextField","size","fullWidth","InputProps","style","paddingRight","startAdornment","mr","endAdornment","HandleVendor","ConfirmationDialog","onConfirmDialogClose","onYesClick","deleteData","then"],"mappings":"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","file":"static/js/28.fd73085f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Dialog, Button, Grid } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { MyAlert, TextField, FormHandlerBox } from 'app/components'\r\nimport { edit, add, clearValue } from 'app/redux/actions/admin/VendorActions'\r\n\r\nconst MemberEditorDialog = ({ uid, open, handleClose }) => {\r\n    const {\r\n        alertType,\r\n        showAlert,\r\n        clearValues,\r\n\r\n        isEditing,\r\n        alertText,\r\n        address,\r\n        contect,\r\n        email,\r\n        pincode,\r\n        vendor_name,\r\n        _id,\r\n    } = useSelector((x) => x.vendorList)\r\n\r\n    const [state, setState] = useState({\r\n        id: _id,\r\n\r\n        contect: contect,\r\n        pincode: pincode,\r\n        address: address,\r\n        vendor_name: vendor_name,\r\n        email: email,\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n    const cancleWithClean = () => {\r\n        handleClose()\r\n        dispatch(clearValue())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clearValues) {\r\n            cancleWithClean()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [clearValues])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (isEditing) {\r\n            dispatch(edit(state))\r\n        } else {\r\n            dispatch(add(state))\r\n        }\r\n    }\r\n\r\n    const handleHospitalInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                {isEditing ? (\r\n                    <H4 sx={{ mb: '20px' }}>Update Vendor Info</H4>\r\n                ) : (\r\n                    <H4 sx={{ mb: '20px' }}>Add New Vendor</H4>\r\n                )}\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"vendor_name\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.vendor_name}\r\n                                validators={['required']}\r\n                                label=\"Vendor Name\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"address\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.address}\r\n                                validators={['required']}\r\n                                label=\"Address\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"pincode\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.pincode}\r\n                                validators={['required']}\r\n                                label=\"Pincode\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                onChange={handleHospitalInput}\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                value={state.email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={[\r\n                                    'this field is required',\r\n                                    'email is not valid',\r\n                                ]}\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Mobile Nubmer\"\r\n                                onChange={handleHospitalInput}\r\n                                type=\"text\"\r\n                                name=\"contect\"\r\n                                value={state.contect}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormHandlerBox>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={cancleWithClean}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </FormHandlerBox>\r\n                </ValidatorForm>\r\n            </Box>\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={alertText}\r\n                />\r\n            ) : null}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","import { Link } from 'react-router-dom'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport {\r\n    FlexBox,\r\n    Container,\r\n    StyledButton,\r\n    MyAlert,\r\n    LodingShow,\r\n} from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport {\r\n    Avatar,\r\n    Grow,\r\n    Icon,\r\n    IconButton,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { H5, Small } from 'app/components/Typography'\r\nimport ConfirmationDialog from 'app/components/ConfirmationDialog/ConfirmationDialog'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n// my import\r\nimport HandleVendor from './HandleVendor'\r\nimport {\r\n    getAllVendor,\r\n    setEditData,\r\n    deleteData,\r\n} from 'app/redux/actions/admin/VendorActions'\r\n\r\nconst CustomerList = () => {\r\n    // for add and edit diology actions\r\n    const [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n        useState(false)\r\n\r\n    // auto open add vendor dialog\r\n\r\n    const location = useLocation()\r\n    useEffect(() => {\r\n        if (location.pathname === '/allVendor/new') {\r\n            setShouldOpenEditorDialog(true)\r\n        }\r\n    }, [location.pathname])\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n        setShouldOpenConfirmationDialog(false)\r\n        dispatch(getAllVendor())\r\n    }\r\n    const handleDeleteUser = (hospitalId) => {\r\n        setHospitalDa(hospitalId)\r\n        setShouldOpenConfirmationDialog(true)\r\n    }\r\n\r\n    const handleConfirmationResponse = () => {\r\n        dispatch(deleteData(hospitalDa)).then(() => {\r\n            handleDialogClose()\r\n        })\r\n        dispatch(getAllVendor())\r\n    }\r\n    // complete\r\n    let {\r\n        vendorData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n        isLoading,\r\n    } = useSelector((state) => state.vendorList)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllVendor())\r\n    }, [dispatch])\r\n    // my import finish\r\n\r\n    var privatrRoute = false\r\n    if (location.pathname === '/allVendorD') {\r\n        privatrRoute = true\r\n    }\r\n\r\n    vendorData = vendorData.filter((data) => {\r\n        return privatrRoute ? !data.vendorStatus : data.vendorStatus\r\n    })\r\n\r\n    const { palette } = useTheme()\r\n    const textMuted = palette.text.secondary\r\n    const bgSuccess = palette.success.main\r\n\r\n    const columns = [\r\n        {\r\n            name: 'vendor_name', // field name in the row object\r\n            label: 'Info', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n                customBodyRenderLite: (dataIndex) => {\r\n                    let user = vendorData[dataIndex]\r\n\r\n                    return (\r\n                        <FlexBox>\r\n                            <Avatar\r\n                                sx={{ width: 48, height: 48 }}\r\n                                src={user?.imgUrl}\r\n                            />\r\n                            <Box ml=\"12px\">\r\n                                <H5 sx={{ fontSize: '15px' }}>\r\n                                    {user?.vendor_name}\r\n                                </H5>\r\n                                <Small sx={{ color: textMuted }}>\r\n                                    {user?.email}\r\n                                </Small>\r\n                            </Box>\r\n                        </FlexBox>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'contect',\r\n            label: 'Contect',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: '',\r\n            label: '',\r\n            options: {\r\n                filter: false,\r\n                customBodyRenderLite: (dataIndex) => (\r\n                    <FlexBox>\r\n                        <Box flexGrow={1}></Box>\r\n\r\n                        <Button\r\n                            variant={privatrRoute ? 'contained' : 'outlined'}\r\n                            color={privatrRoute ? 'success' : 'error'}\r\n                            onClick={() =>\r\n                                handleDeleteUser(vendorData[dataIndex]._id)\r\n                            }\r\n                        >\r\n                            {privatrRoute ? 'Active' : 'Deactive'}\r\n                        </Button>\r\n                        <Box flexGrow={1}></Box>\r\n                        {!privatrRoute && (\r\n                            <StyledButton\r\n                                // variant=\"contained\"\r\n                                sx={{ color: bgSuccess }}\r\n                                onClick={() => {\r\n                                    dispatch(setEditData(vendorData[dataIndex]))\r\n                                    setShouldOpenEditorDialog(true)\r\n                                }}\r\n                            >\r\n                                <Icon color=\"primary\">edit</Icon>\r\n                            </StyledButton>\r\n                        )}\r\n                    </FlexBox>\r\n                ),\r\n            },\r\n        },\r\n        {\r\n            name: '',\r\n            label: '',\r\n            options: {\r\n                filter: false,\r\n                customBodyRenderLite: (dataIndex) => (\r\n                    <FlexBox>\r\n                        <Box flexGrow={1}></Box>\r\n\r\n                        <Link\r\n                            to={`/wereHouseStock/${vendorData[dataIndex].vendor_name}`}\r\n                        >\r\n                            <IconButton>\r\n                                <Icon>arrow_right_alt</Icon>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </FlexBox>\r\n                ),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            {!privatrRoute && (\r\n                <Button\r\n                    sx={{ mb: 2 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setShouldOpenEditorDialog(true)}\r\n                >\r\n                    Add New Vendor\r\n                </Button>\r\n            )}\r\n            {isLoading && <LodingShow />}\r\n            <Box overflow=\"auto\">\r\n                <Box minWidth={750}>\r\n                    <MUIDataTable\r\n                        title={'Vendor list'}\r\n                        data={vendorData}\r\n                        columns={columns}\r\n                        options={{\r\n                            filterType: 'textField',\r\n                            responsive: 'simple',\r\n                            selectableRows: 'none',\r\n                            // filter: true,\r\n                            // sort: true,\r\n                            // selectableRows: \"none\", // set checkbox for each row\r\n                            // search: false, // set search option\r\n                            // filter: false, // set data filter option\r\n                            // download: false, // set download option\r\n                            // print: false, // set print option\r\n                            // pagination: true, //set pagination option\r\n                            // viewColumns: false, // set column option\r\n                            elevation: 0,\r\n                            rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                            customSearchRender: (\r\n                                searchText,\r\n                                handleSearch,\r\n                                hideSearch,\r\n                                options\r\n                            ) => {\r\n                                return (\r\n                                    <Grow appear in={true} timeout={300}>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                            fullWidth\r\n                                            onChange={({ target: { value } }) =>\r\n                                                handleSearch(value)\r\n                                            }\r\n                                            InputProps={{\r\n                                                style: {\r\n                                                    paddingRight: 0,\r\n                                                },\r\n                                                startAdornment: (\r\n                                                    <Icon\r\n                                                        fontSize=\"small\"\r\n                                                        sx={{ mr: 1 }}\r\n                                                    >\r\n                                                        search\r\n                                                    </Icon>\r\n                                                ),\r\n                                                endAdornment: (\r\n                                                    <IconButton\r\n                                                        onClick={hideSearch}\r\n                                                    >\r\n                                                        <Icon fontSize=\"small\">\r\n                                                            clear\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </Grow>\r\n                                )\r\n                            },\r\n                        }}\r\n                    />\r\n                    {shouldOpenEditorDialog && (\r\n                        <HandleVendor\r\n                            handleClose={handleDialogClose}\r\n                            open={shouldOpenEditorDialog}\r\n                        />\r\n                    )}\r\n                    {shouldOpenConfirmationDialog && (\r\n                        <ConfirmationDialog\r\n                            open={shouldOpenConfirmationDialog}\r\n                            onConfirmDialogClose={handleDialogClose}\r\n                            onYesClick={handleConfirmationResponse}\r\n                            text=\"Are you sure to delete?\"\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Box>{' '}\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={\r\n                        privatrRoute\r\n                            ? 'Vendor activated successfully'\r\n                            : alertText\r\n                    }\r\n                />\r\n            ) : null}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CustomerList\r\n\r\n// import { Container, StyledTable } from 'app/components/admin/table/index'\r\n// import Modal from 'app/components/Modal/Modal'\r\n// // import Invoice from 'app/components/Invoice/Invoice'\r\n// // import VendorInfo from 'app/components/Invoice/VendorInfo'\r\n\r\n// const AllVendor = () => {\r\n//     const [search, setSearch] = useState('')\r\n//     const vendorData = useSelector(\r\n//         (state) => state.vendorList\r\n//     ).vendorData.filter(\r\n//         (vendor) =>\r\n//             vendor.vendor_name.toLowerCase().includes(search.toLowerCase()) ||\r\n//             vendor.email.toLowerCase().includes(search.toLowerCase())\r\n//     )\r\n//     const dispatch = useDispatch()\r\n\r\n//     useEffect(() => {\r\n//         dispatch(getAllVendor())\r\n//     }, [dispatch])\r\n\r\n//     const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n//     const [page, setPage] = React.useState(0)\r\n//     const [showModal, setShowModal] = useState(false)\r\n//     const [currentVendor, setCurrentVendor] = useState({})\r\n\r\n//     const handleChangePage = (event, newPage) => {\r\n//         setPage(newPage)\r\n//     }\r\n\r\n//     const handleChangeRowsPerPage = (event) => {\r\n//         setRowsPerPage(+event.target.value)\r\n//         setPage(0)\r\n//     }\r\n\r\n//     const changeModal = (subscriber) => {\r\n//         setShowModal(!showModal)\r\n//         setCurrentVendor(subscriber)\r\n//     }\r\n//     return (\r\n//         <Container>\r\n//             <div className=\"breadcrumb\">\r\n//                 <Breadcrumb\r\n//                     routeSegments={[\r\n//                         { name: 'Add Vendor', path: '/addVendor' },\r\n//                         { name: 'Form' },\r\n//                     ]}\r\n//                 />\r\n//             </div>\r\n//             {vendorData.length == 0 || vendorData == undefined ? (\r\n//                 <h1> No vendor data in database</h1>\r\n//             ) : (\r\n//                 <SimpleCard title=\"Vendor List\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"Vendor Name\"\r\n//                         value={search}\r\n//                         onChange={(e) => setSearch(e.target.value)}\r\n//                     />\r\n//                     <Box width=\"100%\" overflow=\"auto\">\r\n//                         <StyledTable>\r\n//                             <TableHead>\r\n//                                 <TableRow>\r\n//                                     <TableCell>Name</TableCell>\r\n//                                     {/* <TableCell>Contect</TableCell> */}\r\n//                                     <TableCell>Email</TableCell>\r\n//                                     {/* <TableCell>Address</TableCell> */}\r\n//                                     {/* <TableCell align=\"center\">Pincode</TableCell> */}\r\n//                                     <TableCell align=\"center\">Edit</TableCell>\r\n//                                     <TableCell>Delete</TableCell>\r\n//                                     <TableCell>Print</TableCell>\r\n//                                 </TableRow>\r\n//                             </TableHead>\r\n//                             <TableBody>\r\n//                                 {vendorData\r\n//                                     .slice(\r\n//                                         page * rowsPerPage,\r\n//                                         page * rowsPerPage + rowsPerPage\r\n//                                     )\r\n//                                     .map((subscriber, index) => (\r\n//                                         <TableRow key={index}>\r\n//                                             <TableCell>\r\n//                                                 {subscriber.vendor_name}\r\n//                                             </TableCell>\r\n//                                             {/* <TableCell>\r\n//                                             {subscriber.contect}\r\n//                                         </TableCell> */}\r\n//                                             <TableCell>\r\n//                                                 {subscriber.email}\r\n//                                             </TableCell>\r\n//                                             {/* <TableCell>\r\n//                                             {subscriber.address}\r\n//                                         </TableCell> */}\r\n//                                             {/* <TableCell align=\"center\">\r\n//                                             {subscriber.pincode}\r\n//                                         </TableCell> */}\r\n//                                             <TableCell align=\"center\">\r\n//                                                 <Link\r\n//                                                     to={`/addVendor`}\r\n//                                                     onClick={() =>\r\n//                                                         dispatch(\r\n//                                                             setEditData(\r\n//                                                                 subscriber\r\n//                                                             )\r\n//                                                         )\r\n//                                                     }\r\n//                                                 >\r\n//                                                     <IconButton>\r\n//                                                         <Icon color=\"error\">\r\n//                                                             edit\r\n//                                                         </Icon>\r\n//                                                     </IconButton>\r\n//                                                 </Link>\r\n//                                             </TableCell>\r\n//                                             <TableCell\r\n//                                                 onClick={() => {\r\n//                                                     {\r\n//                                                         alert(\r\n//                                                             'Are you sure you want to delete?'\r\n//                                                         )\r\n//                                                         dispatch(\r\n//                                                             deleteData(\r\n//                                                                 subscriber._id\r\n//                                                             )\r\n//                                                         )\r\n//                                                     }\r\n//                                                 }}\r\n//                                             >\r\n//                                                 <IconButton>\r\n//                                                     <Icon color=\"error\">\r\n//                                                         close\r\n//                                                     </Icon>\r\n//                                                 </IconButton>\r\n//                                             </TableCell>\r\n//                                             <TableCell>\r\n//                                                 <IconButton\r\n//                                                     onClick={() => {\r\n//                                                         changeModal(subscriber)\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     <Icon color=\"primary\">\r\n//                                                         print\r\n//                                                     </Icon>\r\n//                                                 </IconButton>\r\n//                                             </TableCell>\r\n//                                         </TableRow>\r\n//                                     ))}\r\n//                             </TableBody>\r\n//                         </StyledTable>\r\n\r\n//                         <TablePagination\r\n//                             sx={{ px: 2 }}\r\n//                             rowsPerPageOptions={[5, 10, 25]}\r\n//                             component=\"div\"\r\n//                             count={vendorData.length}\r\n//                             rowsPerPage={rowsPerPage}\r\n//                             page={page}\r\n//                             backIconButtonProps={{\r\n//                                 'aria-label': 'Previous Page',\r\n//                             }}\r\n//                             nextIconButtonProps={{\r\n//                                 'aria-label': 'Next Page',\r\n//                             }}\r\n//                             onPageChange={handleChangePage}\r\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\r\n//                         />\r\n//                     </Box>\r\n\r\n//                     {showModal ? (\r\n//                         <Modal>\r\n//                             {console.log('model open')}\r\n//                             <div>\r\n//                                 <h1>Model Open</h1>\r\n//                                 {/* <VendorInfo\r\n//                                     changeModal={changeModal}\r\n//                                     currentVendor={currentVendor}\r\n//                                 /> */}\r\n//                                 <div\r\n//                                     style={{\r\n//                                         display: 'flex',\r\n//                                         width: '200px',\r\n//                                         justifyContent: 'space-between',\r\n//                                         margin: 'auto',\r\n//                                     }}\r\n//                                 >\r\n//                                     <button onClick={changeModal}>Close</button>\r\n//                                     <button>Print</button>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </Modal>\r\n//                     ) : null}\r\n//                 </SimpleCard>\r\n//             )}\r\n//         </Container>\r\n//     )\r\n// }\r\n\r\n// export default AllVendor\r\n"],"sourceRoot":""}