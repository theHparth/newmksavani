{"version":3,"sources":["app/views/admin/stock/AddStock.js"],"names":["AddStock","useSelector","x","stockList","alertType","showAlert","clearValues","isLoading","isEditing","alertText","description","minimumLimit","_id","stock_name","useState","id","state","setState","dispatch","useDispatch","useEffect","clearValueStock","handleInput","e","name","target","value","className","routeSegments","path","onSubmit","preventDefault","edit","add","onError","container","spacing","item","lg","md","sm","xs","sx","mt","type","onChange","validators","label","errorMessages","color","variant","style","margin","disabled","pl","textTransform","onClick","isOpen","typeSeverity","alrtTextToShow"],"mappings":"yNA4KeA,UAvJE,WACb,MAWIC,aAAY,SAACC,GAAD,OAAOA,EAAEC,aAVrBC,EADJ,EACIA,UACAC,EAFJ,EAEIA,UACAC,EAHJ,EAGIA,YACAC,EAJJ,EAIIA,UACAC,EALJ,EAKIA,UACAC,EANJ,EAMIA,UACAC,EAPJ,EAOIA,YACAC,EARJ,EAQIA,aACAC,EATJ,EASIA,IACAC,EAVJ,EAUIA,WAGJ,EAA0BC,mBAAS,CAC/BC,GAAIH,EACJF,YAAaA,EACbC,aAAcA,EACdE,WAAYA,IAJhB,mBAAOG,EAAP,KAAcC,EAAd,KAMMC,EAAWC,cAYjBC,qBAAU,WACFd,GAXJY,EAASG,iBAeV,CAACf,IAEJ,IAcMgB,EAAc,SAACC,GACjB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEvBT,EAAS,2BACFD,GADC,kBAEHQ,EAAOE,MAIhB,OACI,eAAC,IAAD,WACI,qBAAKC,UAAU,aAAf,SACI,cAAC,IAAD,CACIC,cAAe,CACX,CAAEJ,KAAM,YAAaK,KAAM,aAC3B,CAAEL,KAAM,cAIpB,cAAC,IAAD,UACI,eAAC,gBAAD,CAAeM,SAnCN,SAACP,GAClBA,EAAEQ,iBAEEb,EADAV,EACSwB,YAAKhB,GAELiB,YAAIjB,KA8B8BkB,QAAS,kBAAM,MAAtD,UACI,cAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACI,eAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,CAAEC,GAAI,GAAnD,UACI,6BAAK/B,EAAM,aAAe,cAE1B,cAAC,IAAD,CACIgC,KAAK,OACLpB,KAAK,aACLT,GAAG,iBACH8B,SAAUvB,EACVI,MAAOV,EAAMH,WACbiC,WAAY,CAAC,YACbC,MAAM,aACNC,cAAe,CAAC,4BAEpB,cAAC,IAAD,CACIJ,KAAK,OACLpB,KAAK,cACLT,GAAG,iBACH8B,SAAUvB,EACVI,MAAOV,EAAMN,YACboC,WAAY,CAAC,YACbC,MAAM,cACNC,cAAe,CAAC,4BAEpB,cAAC,IAAD,CACIJ,KAAK,OACLpB,KAAK,eACLT,GAAG,iBACH8B,SAAUvB,EACVI,MAAOV,EAAML,aACbmC,WAAY,CAAC,YACbC,MAAM,gCACNC,cAAe,CAAC,iCAI5B,eAAC,IAAD,CACIC,MAAM,UACNC,QAAQ,YACRN,KAAK,SACLO,MAAO,CAAEC,OAAQ,OACjBC,SAAU9C,EALd,UAOI,cAAC,IAAD,mBACA,cAAC,IAAD,CAAMmC,GAAI,CAAEY,GAAI,EAAGC,cAAe,cAAlC,uBAIJ,eAAC,IAAD,CACIN,MAAM,UACNC,QAAQ,YACRN,KAAK,SACLO,MAAO,CAAEC,OAAQ,OACjBI,QAAS,SAACjC,GACNA,EAAEQ,iBAxGtBd,EAAS,CACLF,GAAI,GACJL,YAAa,GACbC,aAAc,GACdE,WAAY,MA8FJ,UAUI,cAAC,IAAD,oBACA,cAAC,IAAD,CAAM6B,GAAI,CAAEY,GAAI,EAAGC,cAAe,cAAlC,iCAMXlD,EACG,cAAC,IAAD,CACIoD,OAAQpD,EACRqD,aAActD,EACduD,eAAgBlD,IAEpB","file":"static/js/25.df451960.chunk.js","sourcesContent":["import {\r\n    Breadcrumb,\r\n    SimpleCard,\r\n    ContainerForm,\r\n    TextField,\r\n    MyAlert,\r\n} from 'app/components'\r\nimport { ValidatorForm } from 'react-material-ui-form-validator'\r\n// import { getAllVendor } from 'app/redux/actions/VendorActions'\r\n\r\nimport { Button, Icon, Grid } from '@mui/material'\r\nimport { Span } from 'app/components/Typography'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    edit,\r\n    add,\r\n    clearValueStock,\r\n} from 'app/redux/actions/admin/StockActions'\r\n\r\nconst AddStock = () => {\r\n    const {\r\n        alertType,\r\n        showAlert,\r\n        clearValues,\r\n        isLoading,\r\n        isEditing,\r\n        alertText,\r\n        description,\r\n        minimumLimit,\r\n        _id,\r\n        stock_name,\r\n    } = useSelector((x) => x.stockList)\r\n\r\n    const [state, setState] = useState({\r\n        id: _id,\r\n        description: description,\r\n        minimumLimit: minimumLimit,\r\n        stock_name: stock_name,\r\n    })\r\n    const dispatch = useDispatch()\r\n    const cancleWithClean = () => {\r\n        dispatch(clearValueStock())\r\n    }\r\n    const clear = () => {\r\n        setState({\r\n            id: '',\r\n            description: '',\r\n            minimumLimit: '',\r\n            stock_name: '',\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        if (clearValues) {\r\n            cancleWithClean()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [clearValues])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (isEditing) {\r\n            dispatch(edit(state))\r\n        } else {\r\n            dispatch(add(state))\r\n        }\r\n    }\r\n    // // for getting vendor data\r\n    // const { vendorData } = useSelector((state) => state.vendorList)\r\n    // useEffect(() => {\r\n    //     dispatch(getAllVendor())\r\n    // }, [dispatch])\r\n\r\n    const handleInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ContainerForm>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'All Stock', path: '/allStock' },\r\n                        { name: 'Table' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard>\r\n                <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n                    <Grid container spacing={6}>\r\n                        <Grid item lg={6} md={6} sm={12} xs={12} sx={{ mt: 2 }}>\r\n                            <h3>{_id ? 'Edit Stock' : 'Add Stock'}</h3>\r\n\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"stock_name\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={state.stock_name}\r\n                                validators={['required']}\r\n                                label=\"Stock Name\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"description\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={state.description}\r\n                                validators={['required']}\r\n                                label=\"Description\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"minimumLimit\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={state.minimumLimit}\r\n                                validators={['required']}\r\n                                label=\"Minimum limit to show warning\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        style={{ margin: '5px' }}\r\n                        disabled={isLoading}\r\n                    >\r\n                        <Icon>send</Icon>\r\n                        <Span sx={{ pl: 1, textTransform: 'capitalize' }}>\r\n                            Submit\r\n                        </Span>\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        style={{ margin: '5px' }}\r\n                        onClick={(e) => {\r\n                            e.preventDefault()\r\n                            clear()\r\n                        }}\r\n                    >\r\n                        <Icon>clear</Icon>\r\n                        <Span sx={{ pl: 1, textTransform: 'capitalize' }}>\r\n                            Clear Value\r\n                        </Span>\r\n                    </Button>\r\n                </ValidatorForm>\r\n            </SimpleCard>\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={alertText}\r\n                />\r\n            ) : null}\r\n        </ContainerForm>\r\n    )\r\n}\r\n\r\nexport default AddStock\r\n"],"sourceRoot":""}