{"version":3,"sources":["app/views/adminUserCreatedby/userStockIn/HandleEditMinimum.js","app/views/adminUserCreatedby/userStockIn/InstockListUser.js"],"names":["StockEditDialog","open","handleClose","useSelector","x","stockInUserList","alertType","showAlert","clearValues","alertText","minimumLimit","_id","stock_name","useState","id","newStock","setNewStock","dispatch","useDispatch","cancleWithClean","clearValueStockUser","useEffect","handleInput","e","name","target","value","Dialog","onClose","Box","p","sx","mb","onSubmit","preventDefault","inStockMinimumChange","Grid","container","spacing","item","sm","xs","type","onChange","validators","label","errorMessages","Button","variant","color","onClick","isOpen","typeSeverity","alrtTextToShow","InstockListUser","React","searchText","setSearchText","state","presentStockUserData","isLoading","shouldOpenEditorDialog","setShouldOpenEditorDialog","palette","useTheme","bgError","error","main","bgPrimary","primary","bgSecondary","secondary","bgSuccess","success","inStockUser","stockDatas","rowsPerPage","setRowsPerPage","page","setPage","title","className","routeSegments","path","onSearch","onSearchValueChange","width","overflow","TableHead","TableRow","TableCell","align","TableBody","slice","map","subscriber","index","px","totalQtyUser","bgcolor","setEditMinimumLimit","Icon","TablePagination","rowsPerPageOptions","component","count","length","backIconButtonProps","nextIconButtonProps","onPageChange","event","newPage","onRowsPerPageChange","HandleEditMinimum"],"mappings":"ySA2HeA,EA9GS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC7B,EAUIC,aAAY,SAACC,GAAD,OAAOA,EAAEC,mBATrBC,EADJ,EACIA,UACAC,EAFJ,EAEIA,UACAC,EAHJ,EAGIA,YAEAC,EALJ,EAKIA,UAEAC,EAPJ,EAOIA,aACAC,EARJ,EAQIA,IACAC,EATJ,EASIA,WAGJ,EAAgCC,mBAAS,CACrCC,GAAIH,EAEJD,aAAcA,EACdE,WAAYA,IAJhB,mBAAOG,EAAP,KAAiBC,EAAjB,KAOMC,EAAWC,cACXC,EAAkB,WACpBjB,IACAe,EAASG,gBAGbC,qBAAU,WACFb,GACAW,MAGL,CAACX,IAEJ,IAMMc,EAAc,SAACC,GACjB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEvBV,EAAY,2BACLD,GADI,kBAENS,EAAOE,MAGhB,OACI,eAACC,EAAA,EAAD,CAAQC,QAAS1B,EAAaD,KAAMA,EAApC,UACI,eAAC4B,EAAA,EAAD,CAAKC,EAAG,EAAR,UACI,cAAC,IAAD,CAAIC,GAAI,CAAEC,GAAI,QAAd,0BAEA,eAAC,gBAAD,CAAeC,SApBN,SAACV,GAClBA,EAAEW,iBAEFjB,EAASkB,YAAqBpB,KAiBtB,UACI,eAACqB,EAAA,EAAD,CAAML,GAAI,CAAEC,GAAI,QAAUK,WAAS,EAACC,QAAS,EAA7C,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACI,cAAC,IAAD,CACIC,KAAK,OAEL5B,GAAG,iBACH6B,SAAUrB,EACVI,MAAOX,EAASH,WAChBgC,WAAY,CAAC,YACbC,MAAM,iBAId,cAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACI,cAAC,IAAD,CACIC,KAAK,OACLlB,KAAK,eACLV,GAAG,iBACH6B,SAAUrB,EACVI,MAAOX,EAASL,aAChBkC,WAAY,CAAC,YACbC,MAAM,gCACNC,cAAe,CAAC,iCAK5B,eAAC,IAAD,WACI,cAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNP,KAAK,SAHT,kBAOA,cAACK,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAM,YACNC,QAAS/B,EAHb,6BAUXZ,EACG,cAAC,IAAD,CACI4C,OAAQ5C,EACR6C,aAAc9C,EACd+C,eAAgB5C,IAEpB,SCkGD6C,UA5LS,WAEpB,MAAkCC,IAAM1C,SAAS,IAAjD,mBAAK2C,EAAL,KAAiBC,EAAjB,KAOA,EAMItD,aAAY,SAACuD,GAAD,OAAWA,EAAMrD,mBANjC,IACIsD,4BADJ,MAC2B,GAD3B,EAEIpD,EAFJ,EAEIA,UACAD,EAHJ,EAGIA,UACAG,EAJJ,EAIIA,UACAmD,EALJ,EAKIA,UAGJ,EAA4D/C,oBAAS,GAArE,mBAAOgD,EAAP,KAA+BC,EAA/B,KAEQC,EAAYC,cAAZD,QACFE,EAAUF,EAAQG,MAAMC,KACxBC,EAAYL,EAAQM,QAAQF,KAC5BG,EAAcP,EAAQQ,UAAUJ,KAChCK,EAAYT,EAAQU,QAAQN,KAE5BlD,EAAWC,cAEjBG,qBAAU,WACN,IAAIqC,EAAQ,CAAEF,cACdvC,EAASyD,YAAYhB,MACtB,CAACzC,EAAUuC,IAEd,IAAImB,EAAahB,GAAwB,GACzC,EAAsCJ,IAAM1C,SAAS,GAArD,mBAAO+D,EAAP,KAAoBC,EAApB,KACA,EAAwBtB,IAAM1C,SAAS,GAAvC,mBAAOiE,EAAP,KAAaC,EAAb,KAeA,OACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAYC,MAAM,cAAlB,UACI,qBAAKC,UAAU,aAAf,SACI,cAAC,IAAD,CACIC,cAAe,CACX,CAAE1D,KAAM,YAAa2D,KAAM,aAC3B,CAAE3D,KAAM,cAInBoC,GAAa,cAAC,IAAD,IACd,cAAC,IAAD,CACIwB,SA1DW,SAAC1D,GACxB+B,EAAc/B,IA0DF2D,oBAAqB7B,IAEzB,eAAC3B,EAAA,EAAD,CAAKyD,MAAM,OAAOC,SAAS,OAA3B,UACI,eAAC,IAAD,WACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,wBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,2BAIA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,uBAEA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,uBAGR,cAACC,EAAA,EAAD,UACKjB,EACIkB,MACGf,EAAOF,EACPE,EAAOF,EAAcA,GAExBkB,KAAI,SAACC,EAAYC,GAAb,OACD,eAACP,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACKI,EAAWnF,aAEhB,cAAC8E,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACKI,EAAWrF,aACNqF,EAAWrF,aACX,2CAEV,cAACgF,EAAA,EAAD,CACI3D,GAAI,CAAEkE,GAAI,GACVN,MAAM,SAFV,SAIKI,EAAWG,aACRH,EAAWG,aACXH,EAAWrF,aACP,eAAC,IAAD,CACIyF,QAAS7B,EADb,UAIQyB,EAAWG,aACb,IALN,eASA,eAAC,IAAD,CACIC,QAAS/B,EADb,UAIQ2B,EAAWG,aACb,IALN,eAUJ,cAAC,IAAD,CAAYC,QAASlC,EAArB,4BAMR,cAACyB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACI,cAAC,IAAD,CACI5D,GAAI,CACAkB,MAAOuB,GAEXtB,QAAS,WACLjC,EACImF,YACIL,IAGRjC,GACI,IAXZ,SAeI,cAACuC,EAAA,EAAD,CAAMpD,MAAM,UAAZ,wBAzDG+C,WAmE/B,cAACM,EAAA,EAAD,CACIvE,GAAI,CAAEkE,GAAI,GACVM,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,UAAU,MACVC,MAAO9B,EAAW+B,OAClB9B,YAAaA,EACbE,KAAMA,EACN6B,oBAAqB,CACjB,aAAc,iBAElBC,oBAAqB,CACjB,aAAc,aAElBC,aAlIK,SAACC,EAAOC,GAC7BhC,EAAQgC,IAkIQC,oBA/HY,SAACF,GAC7BjC,GAAgBiC,EAAMrF,OAAOC,OAC7BqD,EAAQ,MA+HKlB,GACG,cAACoD,EAAD,CACI/G,YA9HE,WACtB4D,GAA0B,GAC1B7C,EAASyD,YAAY,MA6HDzE,KAAM4D,OAIjBtD,EACG,cAAC,IAAD,CACI4C,OAAQ5C,EACR6C,aAAc9C,EACd+C,eAAgB5C,IAEpB","file":"static/js/19.5bba16ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Dialog, Button, Grid } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { MyAlert, TextField, FormHandlerBox } from 'app/components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n    inStockMinimumChange,\r\n    clearValueStockUser,\r\n} from 'app/redux/actions/userCreatedByAdmin/StockInUserAction'\r\n\r\nconst StockEditDialog = ({ open, handleClose }) => {\r\n    const {\r\n        alertType,\r\n        showAlert,\r\n        clearValues,\r\n\r\n        alertText,\r\n\r\n        minimumLimit,\r\n        _id,\r\n        stock_name,\r\n    } = useSelector((x) => x.stockInUserList)\r\n\r\n    const [newStock, setNewStock] = useState({\r\n        id: _id,\r\n\r\n        minimumLimit: minimumLimit,\r\n        stock_name: stock_name,\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n    const cancleWithClean = () => {\r\n        handleClose()\r\n        dispatch(clearValueStockUser())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clearValues) {\r\n            cancleWithClean()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [clearValues])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        dispatch(inStockMinimumChange(newStock))\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        setNewStock({\r\n            ...newStock,\r\n            [name]: value,\r\n        })\r\n    }\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Edit minumum</H4>\r\n\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                // name=\"stock_name\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={newStock.stock_name}\r\n                                validators={['required']}\r\n                                label=\"Stock Name\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"minimumLimit\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleInput}\r\n                                value={newStock.minimumLimit}\r\n                                validators={['required']}\r\n                                label=\"Minimum limit to show warning\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormHandlerBox>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={cancleWithClean}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </FormHandlerBox>\r\n                </ValidatorForm>\r\n            </Box>\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={alertText}\r\n                />\r\n            ) : null}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default StockEditDialog\r\n","import {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    TablePagination,\r\n} from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    setEditMinimumLimit,\r\n    inStockUser,\r\n} from 'app/redux/actions/userCreatedByAdmin/StockInUserAction'\r\nimport {\r\n    Breadcrumb,\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    StockAlert,\r\n    MyAlert,\r\n    StyledButton,\r\n    LodingShow,\r\n    SearchBox,\r\n} from 'app/components'\r\nimport HandleEditMinimum from './HandleEditMinimum'\r\n\r\nconst InstockListUser = () => {\r\n    // search for all\r\n    let [searchText, setSearchText] = React.useState('')\r\n\r\n    const handleChangeSearch = (value) => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    //\r\n    let {\r\n        presentStockUserData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n        isLoading,\r\n    } = useSelector((state) => state.stockInUserList)\r\n    // edit minimum limitconst [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    const { palette } = useTheme()\r\n    const bgError = palette.error.main\r\n    const bgPrimary = palette.primary.main\r\n    const bgSecondary = palette.secondary.main\r\n    const bgSuccess = palette.success.main\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        var state = { searchText }\r\n        dispatch(inStockUser(state))\r\n    }, [dispatch, searchText])\r\n\r\n    var stockDatas = presentStockUserData || []\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n        dispatch(inStockUser({}))\r\n    }\r\n    return (\r\n        <ContainerTable>\r\n            <SimpleCard title=\"Stocks List\">\r\n                <div className=\"breadcrumb\">\r\n                    <Breadcrumb\r\n                        routeSegments={[\r\n                            { name: 'Add Stock', path: '/addStock' },\r\n                            { name: 'Table' },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                {isLoading && <LodingShow />}\r\n                <SearchBox\r\n                    onSearch={handleChangeSearch}\r\n                    onSearchValueChange={searchText}\r\n                />\r\n                <Box width=\"100%\" overflow=\"auto\">\r\n                    <StyledTable>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">Stock Name</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    Minimum Limit\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"center\">Total Qty</TableCell>\r\n\r\n                                <TableCell align=\"center\">Edit</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {stockDatas\r\n                                .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                )\r\n                                .map((subscriber, index) => (\r\n                                    <TableRow key={index}>\r\n                                        <TableCell align=\"center\">\r\n                                            {subscriber.stock_name}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {subscriber.minimumLimit\r\n                                                ? subscriber.minimumLimit\r\n                                                : 'Please add minimum limit to show alert'}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ px: 0 }}\r\n                                            align=\"center\"\r\n                                        >\r\n                                            {subscriber.totalQtyUser ? (\r\n                                                subscriber.totalQtyUser <\r\n                                                subscriber.minimumLimit ? (\r\n                                                    <StockAlert\r\n                                                        bgcolor={bgSecondary}\r\n                                                    >\r\n                                                        {\r\n                                                            subscriber.totalQtyUser\r\n                                                        }{' '}\r\n                                                        available\r\n                                                    </StockAlert>\r\n                                                ) : (\r\n                                                    <StockAlert\r\n                                                        bgcolor={bgPrimary}\r\n                                                    >\r\n                                                        {\r\n                                                            subscriber.totalQtyUser\r\n                                                        }{' '}\r\n                                                        available\r\n                                                    </StockAlert>\r\n                                                )\r\n                                            ) : (\r\n                                                <StockAlert bgcolor={bgError}>\r\n                                                    out of stock\r\n                                                </StockAlert>\r\n                                            )}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                            <StyledButton\r\n                                                sx={{\r\n                                                    color: bgSuccess,\r\n                                                }}\r\n                                                onClick={() => {\r\n                                                    dispatch(\r\n                                                        setEditMinimumLimit(\r\n                                                            subscriber\r\n                                                        )\r\n                                                    )\r\n                                                    setShouldOpenEditorDialog(\r\n                                                        true\r\n                                                    )\r\n                                                }}\r\n                                            >\r\n                                                <Icon color=\"primary\">\r\n                                                    edit\r\n                                                </Icon>\r\n                                            </StyledButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                        </TableBody>\r\n                    </StyledTable>\r\n\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={stockDatas.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                    {shouldOpenEditorDialog && (\r\n                        <HandleEditMinimum\r\n                            handleClose={handleDialogClose}\r\n                            open={shouldOpenEditorDialog}\r\n                        />\r\n                    )}\r\n                </Box>\r\n                {showAlert ? (\r\n                    <MyAlert\r\n                        isOpen={showAlert}\r\n                        typeSeverity={alertType}\r\n                        alrtTextToShow={alertText}\r\n                    />\r\n                ) : null}\r\n            </SimpleCard>\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default InstockListUser\r\n"],"sourceRoot":""}