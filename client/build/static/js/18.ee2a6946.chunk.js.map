{"version":3,"sources":["app/views/adminUserCreatedby/HospitalSellingHandle/PreviousSellingEntryManage.js"],"names":["PreviousSellingEntryManage","useState","hospitalDa","setHospitalDa","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","handleDialogClose","React","expanded","setExpanded","rowsPerPage","setRowsPerPage","page","setPage","useSelector","state","todaySellingUserList","todaySellingData","showAlert","alertType","alertText","isLoading","dispatch","useDispatch","useEffect","getAllDataTodaySelling","console","log","className","routeSegments","name","path","title","width","id","slice","map","subscriber","index","onChange","panel","event","isExpanded","expandIcon","moment","createdAt","format","length","style","backgroundColor","align","variant","color","onClick","setEditData","to","hospitalId","_id","stock_name","totalBox","totalQtyInOneBox","price","open","onConfirmDialogClose","onYesClick","deleteData","then","text","sx","px","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onPageChange","newPage","onRowsPerPageChange","target","value","isOpen","typeSeverity","alrtTextToShow"],"mappings":"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","file":"static/js/18.ee2a6946.chunk.js","sourcesContent":["import Accordion from '@mui/material/Accordion'\r\nimport AccordionDetails from '@mui/material/AccordionDetails'\r\nimport AccordionSummary from '@mui/material/AccordionSummary'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { Box } from '@mui/system'\r\nimport { Link } from 'react-router-dom' // my import\r\nimport moment from 'moment'\r\nimport {\r\n    Breadcrumb,\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    Heading,\r\n    SecondaryHeading,\r\n    MyAlert,\r\n    LodingShow,\r\n} from 'app/components'\r\nimport {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TablePagination,\r\n    Button,\r\n} from '@mui/material'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ConfirmationDialog from 'app/components/ConfirmationDialog/ConfirmationDialog'\r\n\r\nimport {\r\n    getAllDataTodaySelling,\r\n    setEditData,\r\n    deleteData,\r\n} from 'app/redux/actions/userCreatedByAdmin/TodaySellingUserAction'\r\n\r\nconst PreviousSellingEntryManage = () => {\r\n    // for printing and deleting pperpose\r\n    const [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n        useState(false)\r\n    const handleDialogClose = () => {\r\n        setShouldOpenConfirmationDialog(false)\r\n        // dispatch(getHospitalsData())\r\n    }\r\n    const handleDeleteUser = (hospitalId) => {\r\n        setHospitalDa(hospitalId)\r\n        setShouldOpenConfirmationDialog(true)\r\n    }\r\n\r\n    const handleConfirmationResponse = () => {\r\n        dispatch(deleteData(hospitalDa)).then(() => {\r\n            handleDialogClose()\r\n            setExpanded(false)\r\n        })\r\n        dispatch(getAllDataTodaySelling({}))\r\n    }\r\n\r\n    // for panel setup\r\n    const [expanded, setExpanded] = React.useState(false)\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false)\r\n    }\r\n\r\n    // for page setup\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(25)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    let {\r\n        todaySellingData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n        isLoading,\r\n    } = useSelector((state) => state.todaySellingUserList)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllDataTodaySelling({}))\r\n        setExpanded(false)\r\n    }, [dispatch])\r\n\r\n    console.log('todaySellingData', todaySellingData)\r\n\r\n    return (\r\n        <ContainerTable>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Stock out form', path: '/stockOutForm' },\r\n                        { name: 'Form' },\r\n                    ]}\r\n                />\r\n                {/* date chooser from--------FROM---------- */}\r\n                {/* <SearchBox\r\n                    onSearch={handleChangeSearch}\r\n                    onSearchValueChange={searchText}\r\n                />\r\n                <DateChoose dateProjection={(state) => setSearchDate(state)} /> */}\r\n                {isLoading && <LodingShow />}\r\n            </div>\r\n\r\n            <SimpleCard title=\"Selling Info.\">\r\n                <Box width=\"100%\">\r\n                    <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                    >\r\n                        <Heading>Seeling date</Heading>\r\n                        <SecondaryHeading>Total Items</SecondaryHeading>\r\n                    </AccordionSummary>\r\n                    {/* data print start from here*/}\r\n                    {todaySellingData\r\n                        .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                        )\r\n                        .map((subscriber, index) => (\r\n                            <Accordion\r\n                                expanded={expanded === `panel${index}`}\r\n                                onChange={handleChange(`panel${index}`)}\r\n                                key={index}\r\n                            >\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel2bh-content\"\r\n                                    id=\"panel2bh-header\"\r\n                                >\r\n                                    <Heading>\r\n                                        {' '}\r\n                                        {moment(subscriber.createdAt).format(\r\n                                            'MMM Do, YYYY'\r\n                                        )}\r\n                                    </Heading>\r\n                                    <SecondaryHeading>\r\n                                        {subscriber.todaySellingData.length}\r\n                                    </SecondaryHeading>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails\r\n                                    style={{ backgroundColor: '#F5F5F5' }}\r\n                                >\r\n                                    <StyledTable>\r\n                                        <TableHead\r\n                                            style={{\r\n                                                backgroundColor: '#EBF5FB',\r\n                                            }}\r\n                                        >\r\n                                            <TableRow>\r\n                                                <TableCell>\r\n                                                    Stock Name\r\n                                                </TableCell>\r\n                                                <TableCell>Total Qty</TableCell>\r\n                                                <TableCell>Price</TableCell>\r\n\r\n                                                <TableCell align=\"right\">\r\n                                                    <>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"success\"\r\n                                                            onClick={() =>\r\n                                                                dispatch(\r\n                                                                    setEditData(\r\n                                                                        subscriber\r\n                                                                    )\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <Link\r\n                                                                to={\r\n                                                                    '/newEntryForm'\r\n                                                                }\r\n                                                            >\r\n                                                                Edit\r\n                                                            </Link>\r\n                                                        </Button>\r\n                                                        {/* <TableCell></TableCell> */}\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"error\"\r\n                                                            onClick={() =>\r\n                                                                handleDeleteUser(\r\n                                                                    subscriber._id\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Button>\r\n                                                    </>\r\n                                                </TableCell>\r\n                                                {/* <TableCell align=\"center\">\r\n                                                    <Button\r\n                                                        variant=\"outlined\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => {\r\n                                                            setShouldOpenEditorDialog(\r\n                                                                true\r\n                                                            )\r\n                                                            setInfo(subscriber)\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon color=\"primary\">\r\n                                                            print\r\n                                                        </Icon>\r\n                                                        \r\n                                                    </Button>\r\n                                                </TableCell> */}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {subscriber.todaySellingData.map(\r\n                                                (subscriber, index) => (\r\n                                                    <TableRow key={index}>\r\n                                                        <TableCell>\r\n                                                            {\r\n                                                                subscriber.stock_name\r\n                                                            }\r\n                                                        </TableCell>\r\n                                                        <TableCell>\r\n                                                            {subscriber.totalBox *\r\n                                                                subscriber.totalQtyInOneBox}\r\n                                                        </TableCell>\r\n                                                        <TableCell>\r\n                                                            ${' '}\r\n                                                            {subscriber.price\r\n                                                                ? subscriber.price\r\n                                                                : 0}\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                )\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </StyledTable>\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))}\r\n                    {shouldOpenConfirmationDialog && (\r\n                        <ConfirmationDialog\r\n                            open={shouldOpenConfirmationDialog}\r\n                            onConfirmDialogClose={handleDialogClose}\r\n                            onYesClick={handleConfirmationResponse}\r\n                            text=\"Are you sure to delete?\"\r\n                        />\r\n                    )}\r\n                    {/* {shouldOpenEditorDialog && (\r\n                        <InvoiceDetails\r\n                            handleClose={handleDialogClose}\r\n                            open={shouldOpenEditorDialog}\r\n                            invoiceInfo={info}\r\n                        />\r\n                    )} */}\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={todaySellingData.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                    {showAlert ? (\r\n                        <MyAlert\r\n                            isOpen={showAlert}\r\n                            typeSeverity={alertType}\r\n                            alrtTextToShow={alertText}\r\n                        />\r\n                    ) : null}\r\n                </Box>\r\n            </SimpleCard>\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default PreviousSellingEntryManage\r\n"],"sourceRoot":""}