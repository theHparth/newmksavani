{"version":3,"sources":["app/views/admin/hospital/HandleHospital.jsx","app/views/admin/hospital/AllHospital.js"],"names":["MemberEditorDialog","open","handleClose","useSelector","x","hospitalList","alertType","showAlert","clearValues","isEditing","address","contect","email","pincode","hospitalName","_id","alertText","isLoading","useState","id","password","confirmPassword","state","setState","dispatch","useDispatch","cancleWithClean","clearValue","useEffect","handleHospitalInput","e","name","target","value","ValidatorForm","addValidationRule","console","log","removeValidationRule","Dialog","onClose","Box","p","sx","mb","onSubmit","preventDefault","editHospital","addHospital","Grid","container","spacing","item","sm","xs","type","onChange","validators","label","errorMessages","Button","variant","color","onClick","isOpen","typeSeverity","alrtTextToShow","CustomerList","hospitalDa","setHospitalDa","shouldOpenEditorDialog","setShouldOpenEditorDialog","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","handleDialogClose","getHospitalsData","hospitalsData","location","pathname","useLocation","privatrRoute","filter","data","hospitalStatus","palette","useTheme","textMuted","text","secondary","bgSuccess","success","main","columns","options","customBodyRenderLite","dataIndex","user","Avatar","width","height","src","imgUrl","ml","fontSize","flexGrow","hospitalId","setEditHospital","Icon","to","hospitalStockInformation","IconButton","overflow","minWidth","title","filterType","responsive","selectableRows","elevation","rowsPerPageOptions","customSearchRender","searchText","handleSearch","hideSearch","Grow","appear","in","timeout","TextField","size","fullWidth","InputProps","style","paddingRight","startAdornment","mr","endAdornment","HandleHospital","ConfirmationDialog","onConfirmDialogClose","onYesClick","deleteHospital","then"],"mappings":"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","file":"static/js/22.0d513a28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Dialog, Button, Grid } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { MyAlert, TextField, FormHandlerBox, LodingShow } from 'app/components'\r\n\r\nimport {\r\n    editHospital,\r\n    addHospital,\r\n    clearValue,\r\n} from 'app/redux/actions/admin/HospitalActions'\r\n\r\nconst MemberEditorDialog = ({ open, handleClose }) => {\r\n    const {\r\n        alertType,\r\n        showAlert,\r\n        clearValues,\r\n        isEditing,\r\n        address,\r\n        contect,\r\n        email,\r\n        pincode,\r\n\r\n        hospitalName,\r\n        _id,\r\n        alertText,\r\n\r\n        isLoading,\r\n    } = useSelector((x) => x.hospitalList)\r\n    const [state, setState] = useState({\r\n        id: _id,\r\n\r\n        contect: contect,\r\n        pincode: pincode,\r\n        address: address,\r\n        password: '',\r\n        confirmPassword: '',\r\n        email: email,\r\n        hospitalName: hospitalName,\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n    const cancleWithClean = () => {\r\n        handleClose()\r\n        dispatch(clearValue())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clearValues) {\r\n            cancleWithClean()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [clearValues])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (isEditing) {\r\n            dispatch(editHospital(state))\r\n        } else {\r\n            dispatch(addHospital(state))\r\n        }\r\n    }\r\n\r\n    const handleHospitalInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    // for password verification\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n            console.log(value)\r\n\r\n            if (value !== state.password) {\r\n                return false\r\n            }\r\n            return true\r\n        })\r\n        return () => ValidatorForm.removeValidationRule('isPasswordMatch')\r\n    }, [state.password])\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                {isEditing ? (\r\n                    <H4 sx={{ mb: '20px' }}>Update Hospital</H4>\r\n                ) : (\r\n                    <H4 sx={{ mb: '20px' }}>Add Hospital</H4>\r\n                )}\r\n                {/* {isLoading && <LodingShow />} */}\r\n                <ValidatorForm onSubmit={handleSubmit}>\r\n                    <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"hospitalName\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.hospitalName}\r\n                                validators={['required']}\r\n                                label=\"HospitalName  ||  Username\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"address\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.address}\r\n                                validators={['required']}\r\n                                label=\"Address\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                type=\"text\"\r\n                                name=\"pincode\"\r\n                                id=\"standard-basic\"\r\n                                onChange={handleHospitalInput}\r\n                                value={state.pincode}\r\n                                validators={['required']}\r\n                                label=\"Pincode\"\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Mobile Nubmer\"\r\n                                onChange={handleHospitalInput}\r\n                                type=\"text\"\r\n                                name=\"contect\"\r\n                                value={state.contect}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={16} xs={12}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                onChange={handleHospitalInput}\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                value={state.email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={[\r\n                                    'this field is required',\r\n                                    'email is not valid',\r\n                                ]}\r\n                            />\r\n                            <div>\r\n                                <TextField\r\n                                    label=\"Password\"\r\n                                    onChange={handleHospitalInput}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={state.password}\r\n                                    validators={!isEditing && ['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <TextField\r\n                                    label=\"Confirm Password\"\r\n                                    onChange={handleHospitalInput}\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    value={state.confirmPassword}\r\n                                    validators={\r\n                                        !isEditing && [\r\n                                            'required',\r\n                                            'isPasswordMatch',\r\n                                        ]\r\n                                    }\r\n                                    errorMessages={[\r\n                                        'this field is required',\r\n                                        \"password didn't match\",\r\n                                    ]}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormHandlerBox>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={cancleWithClean}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </FormHandlerBox>\r\n                </ValidatorForm>\r\n            </Box>\r\n            {showAlert ? (\r\n                <MyAlert\r\n                    isOpen={showAlert}\r\n                    typeSeverity={alertType}\r\n                    alrtTextToShow={alertText}\r\n                />\r\n            ) : null}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","import { Link } from 'react-router-dom'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport { FlexBox, Container, StyledButton, MyAlert } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport {\r\n    Avatar,\r\n    Grow,\r\n    Icon,\r\n    IconButton,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { H5, Small } from 'app/components/Typography'\r\nimport ConfirmationDialog from 'app/components/ConfirmationDialog/ConfirmationDialog'\r\nimport { useLocation } from 'react-router-dom' // my import\r\nimport HandleHospital from './HandleHospital'\r\nimport {\r\n    getHospitalsData,\r\n    setEditHospital,\r\n    deleteHospital,\r\n    hospitalStockInformation,\r\n} from 'app/redux/actions/admin/HospitalActions'\r\n\r\nconst CustomerList = () => {\r\n    const [hospitalDa, setHospitalDa] = useState(null)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n        useState(false)\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n        setShouldOpenConfirmationDialog(false)\r\n        dispatch(getHospitalsData())\r\n    }\r\n    const handleDeleteUser = (hospitalId) => {\r\n        setHospitalDa(hospitalId)\r\n        setShouldOpenConfirmationDialog(true)\r\n    }\r\n\r\n    const handleConfirmationResponse = () => {\r\n        dispatch(deleteHospital(hospitalDa)).then(() => {\r\n            handleDialogClose()\r\n        })\r\n        dispatch(getHospitalsData())\r\n    }\r\n\r\n    let {\r\n        hospitalsData = [],\r\n        showAlert,\r\n        alertType,\r\n        alertText,\r\n    } = useSelector((state) => state.hospitalList)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        console.log(location.pathname, 'aaaaaaaaaaaaaa')\r\n        dispatch(getHospitalsData())\r\n    }, [dispatch])\r\n    // my import finish\r\n    const location = useLocation()\r\n\r\n    console.log(location.pathname, '2222222222222')\r\n    var privatrRoute = false\r\n    if (location.pathname === '/allHospitalsD') {\r\n        privatrRoute = true\r\n    }\r\n    console.log(privatrRoute)\r\n\r\n    hospitalsData = hospitalsData.filter((data) => {\r\n        return privatrRoute ? !data.hospitalStatus : data.hospitalStatus\r\n    })\r\n\r\n    // for design\r\n    const { palette } = useTheme()\r\n    const textMuted = palette.text.secondary\r\n    const bgSuccess = palette.success.main\r\n\r\n    const columns = [\r\n        {\r\n            name: 'hospitalName', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n                customBodyRenderLite: (dataIndex) => {\r\n                    let user = hospitalsData[dataIndex]\r\n\r\n                    return (\r\n                        <FlexBox>\r\n                            <Avatar\r\n                                sx={{ width: 48, height: 48 }}\r\n                                src={user?.imgUrl}\r\n                            />\r\n                            <Box ml=\"12px\">\r\n                                <H5 sx={{ fontSize: '15px' }}>\r\n                                    {user?.hospitalName}\r\n                                </H5>\r\n                                <Small sx={{ color: textMuted }}>\r\n                                    {user?.email}\r\n                                </Small>\r\n                            </Box>\r\n                        </FlexBox>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            // options: {\r\n            //     filter: true,\r\n            // },\r\n        },\r\n        {\r\n            name: 'contect',\r\n            label: 'Contect',\r\n            // options: {\r\n            //     filter: true,\r\n            // },\r\n        },\r\n        {\r\n            name: 'lastActive',\r\n            label: 'Last seen',\r\n            // options: {\r\n            //     filter: true,\r\n            // },\r\n        },\r\n        {\r\n            name: '',\r\n            label: '',\r\n            options: {\r\n                filter: true,\r\n                customBodyRenderLite: (dataIndex) => (\r\n                    <FlexBox>\r\n                        <Box flexGrow={1}></Box>\r\n\r\n                        <Button\r\n                            variant={privatrRoute ? 'contained' : 'outlined'}\r\n                            color={privatrRoute ? 'success' : 'error'}\r\n                            onClick={() =>\r\n                                handleDeleteUser(hospitalsData[dataIndex]._id)\r\n                            }\r\n                        >\r\n                            {privatrRoute ? 'Active' : 'Deactive'}\r\n                        </Button>\r\n\r\n                        <Box flexGrow={1}></Box>\r\n\r\n                        {!privatrRoute && (\r\n                            <StyledButton\r\n                                // variant=\"contained\"\r\n                                sx={{ color: bgSuccess }}\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        setEditHospital(\r\n                                            hospitalsData[dataIndex]\r\n                                        )\r\n                                    )\r\n                                    setShouldOpenEditorDialog(true)\r\n                                }}\r\n                            >\r\n                                <Icon color=\"primary\">edit</Icon>\r\n                            </StyledButton>\r\n                        )}\r\n                    </FlexBox>\r\n                ),\r\n            },\r\n        },\r\n\r\n        {\r\n            name: '',\r\n            label: '',\r\n            options: {\r\n                filter: false,\r\n                customBodyRenderLite: (dataIndex) => (\r\n                    <FlexBox>\r\n                        <Box flexGrow={1}></Box>\r\n\r\n                        <Link\r\n                            to={`/hospitalData/${hospitalsData[dataIndex]._id}`}\r\n                            onClick={() =>\r\n                                dispatch(\r\n                                    hospitalStockInformation(\r\n                                        hospitalsData[dataIndex]._id\r\n                                    )\r\n                                )\r\n                            }\r\n                        >\r\n                            <IconButton>\r\n                                <Icon>arrow_right_alt</Icon>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </FlexBox>\r\n                ),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            {!privatrRoute && (\r\n                <Button\r\n                    sx={{ mb: 2 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setShouldOpenEditorDialog(true)}\r\n                >\r\n                    Add New Hospital\r\n                </Button>\r\n            )}\r\n            <Box overflow=\"auto\">\r\n                <Box minWidth={750}>\r\n                    <MUIDataTable\r\n                        title={'Hospital list'}\r\n                        data={hospitalsData}\r\n                        columns={columns}\r\n                        options={{\r\n                            filterType: 'textField',\r\n                            responsive: 'simple',\r\n                            selectableRows: 'none',\r\n                            // filterType: 'checkbox',\r\n                            // responsive: 'standard',\r\n\r\n                            // filter: true,\r\n                            // sort: true,\r\n                            // selectableRows: \"none\", // set checkbox for each row\r\n                            // search: false, // set search option\r\n                            // filter: false, // set data filter option\r\n                            // download: false, // set download option\r\n                            // print: false, // set print option\r\n                            // pagination: true, //set pagination option\r\n                            // viewColumns: false, // set column option\r\n\r\n                            elevation: 0,\r\n                            rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                            customSearchRender: (\r\n                                searchText,\r\n                                handleSearch,\r\n                                hideSearch,\r\n                                options\r\n                            ) => {\r\n                                return (\r\n                                    <Grow appear in={true} timeout={300}>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                            fullWidth\r\n                                            onChange={({ target: { value } }) =>\r\n                                                handleSearch(value)\r\n                                            }\r\n                                            InputProps={{\r\n                                                style: {\r\n                                                    paddingRight: 0,\r\n                                                },\r\n                                                startAdornment: (\r\n                                                    <Icon\r\n                                                        fontSize=\"small\"\r\n                                                        sx={{ mr: 1 }}\r\n                                                    >\r\n                                                        search\r\n                                                    </Icon>\r\n                                                ),\r\n                                                endAdornment: (\r\n                                                    <IconButton\r\n                                                        onClick={hideSearch}\r\n                                                    >\r\n                                                        <Icon fontSize=\"small\">\r\n                                                            clear\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </Grow>\r\n                                )\r\n                            },\r\n                        }}\r\n                    />\r\n                    {shouldOpenEditorDialog && (\r\n                        <HandleHospital\r\n                            handleClose={handleDialogClose}\r\n                            open={shouldOpenEditorDialog}\r\n                        />\r\n                    )}\r\n                    {shouldOpenConfirmationDialog && (\r\n                        <ConfirmationDialog\r\n                            open={shouldOpenConfirmationDialog}\r\n                            onConfirmDialogClose={handleDialogClose}\r\n                            onYesClick={handleConfirmationResponse}\r\n                            text={\r\n                                privatrRoute\r\n                                    ? 'Sure to active    !!'\r\n                                    : 'Are you sure to deactive?'\r\n                            }\r\n                        />\r\n                    )}\r\n                </Box>\r\n                {showAlert ? (\r\n                    <MyAlert\r\n                        isOpen={showAlert}\r\n                        typeSeverity={alertType}\r\n                        alrtTextToShow={\r\n                            privatrRoute\r\n                                ? 'Hospital activated successfully'\r\n                                : alertText\r\n                        }\r\n                    />\r\n                ) : null}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CustomerList\r\n"],"sourceRoot":""}