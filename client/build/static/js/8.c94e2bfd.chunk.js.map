{"version":3,"sources":["app/views/sessions/login/JwtLogin.jsx","../node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/internal/switchBaseClasses.js","../node_modules/@mui/material/internal/SwitchBase.js","../node_modules/@mui/material/FormControlLabel/FormControlLabel.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/Checkbox.js"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","IMG","width","JWTRoot","minHeight","maxWidth","borderRadius","margin","StyledProgress","CircularProgress","top","left","JwtLogin","navigate","useNavigate","useState","loading","setLoading","email","password","userInfo","setUserInfo","message","setMessage","login","useAuth","handleChange","target","name","value","temp","textError","useTheme","palette","error","main","handleFormSubmit","event","a","className","container","item","lg","md","sm","xs","p","src","alt","onSubmit","sx","mb","variant","size","label","onChange","type","validators","errorMessages","control","checked","agreement","color","flexWrap","disabled","getFormControlLabelUtilityClasses","slot","generateUtilityClass","formControlLabelClasses","generateUtilityClasses","getCheckboxUtilityClass","checkboxClasses","getSwitchBaseUtilityClass","_excluded","SwitchBaseRoot","ButtonBase","ownerState","_extends","edge","marginLeft","marginRight","SwitchBaseInput","cursor","opacity","zIndex","SwitchBase","React","props","ref","autoFocus","checkedProp","checkedIcon","defaultChecked","disabledProp","disableFocusRipple","icon","id","inputProps","inputRef","onBlur","onFocus","readOnly","required","tabIndex","other","_objectWithoutPropertiesLoose","useControlled","controlled","default","Boolean","state","setCheckedState","muiFormControl","useFormControl","hasLabelFor","classes","slots","root","capitalize","input","composeClasses","useUtilityClasses","_jsxs","component","clsx","centerRipple","focusRipple","role","undefined","children","_jsx","nativeEvent","defaultPrevented","newChecked","FormControlLabelRoot","overridesResolver","styles","labelPlacement","theme","verticalAlign","WebkitTapHighlightColor","flexDirection","text","FormControlLabel","inProps","useThemeProps","componentsProps","disableTypography","labelProp","controlProps","forEach","key","fcs","formControlState","states","Typography","typography","createSvgIcon","d","CheckboxRoot","shouldForwardProp","prop","rootShouldForwardProp","indeterminate","secondary","disableRipple","backgroundColor","alpha","action","active","hoverOpacity","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","_icon$props$fontSize","_indeterminateIcon$pr","iconProp","indeterminateIcon","indeterminateIconProp","composedClasses","fontSize"],"mappings":"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","file":"static/js/8.c94e2bfd.chunk.js","sourcesContent":["import {\r\n    Card,\r\n    Grid,\r\n    Button,\r\n    Checkbox,\r\n    CircularProgress,\r\n    FormControlLabel,\r\n} from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Paragraph } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(Box)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    position: 'relative',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst JWTRoot = styled(JustifyBox)(() => ({\r\n    background: '#1A2038',\r\n    minHeight: '100% !important',\r\n    '& .card': {\r\n        maxWidth: 800,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n}))\r\n\r\nconst StyledProgress = styled(CircularProgress)(() => ({\r\n    position: 'absolute',\r\n    top: '6px',\r\n    left: '25px',\r\n}))\r\n\r\nconst JwtLogin = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [userInfo, setUserInfo] = useState({\r\n        email: 'z@gmail.com',\r\n        password: 'zzzzzz',\r\n    })\r\n    const [message, setMessage] = useState('')\r\n    const { login } = useAuth()\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        let temp = { ...userInfo }\r\n        temp[name] = value\r\n        setUserInfo(temp)\r\n    }\r\n\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        setLoading(true)\r\n        try {\r\n            await login(userInfo.email, userInfo.password)\r\n            navigate('/')\r\n        } catch (e) {\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <JWTRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <JustifyBox p={4} height=\"100%\">\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/dreamer.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </JustifyBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        <ContentBox>\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    label=\"Email\"\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={userInfo.email}\r\n                                    validators={['required', 'isEmail']}\r\n                                    errorMessages={[\r\n                                        'this field is required',\r\n                                        'email is not valid',\r\n                                    ]}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '12px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={userInfo.password}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <FormControlLabel\r\n                                    sx={{ mb: '12px', maxWidth: 288 }}\r\n                                    name=\"agreement\"\r\n                                    onChange={handleChange}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            size=\"small\"\r\n                                            onChange={({\r\n                                                target: { checked },\r\n                                            }) =>\r\n                                                handleChange({\r\n                                                    target: {\r\n                                                        name: 'agreement',\r\n                                                        value: checked,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                            checked={userInfo.agreement || true}\r\n                                        />\r\n                                    }\r\n                                    label=\"Remeber me\"\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n\r\n                                <FlexBox mb={2} flexWrap=\"wrap\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Sign in\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <StyledProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    {/* <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\r\n                                    <Button\r\n                                        sx={{ textTransform: 'capitalize' }}\r\n                                        onClick={() =>\r\n                                            navigate('/session/signup')\r\n                                        }\r\n                                    >\r\n                                        Sign up\r\n                                    </Button> */}\r\n                                </FlexBox>\r\n                                {/* <Button\r\n                                    sx={{ color: textPrimary }}\r\n                                    onClick={() =>\r\n                                        navigate('/session/forgot-password')\r\n                                    }\r\n                                >\r\n                                    Forgot password?\r\n                                </Button> */}\r\n                            </ValidatorForm>\r\n                        </ContentBox>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </JWTRoot>\r\n    )\r\n}\r\n\r\nexport default JwtLogin\r\n\r\n// import {\r\n//     Card,\r\n//     Grid,\r\n//     Button,\r\n//     Checkbox,\r\n//     CircularProgress,\r\n//     FormControlLabel,\r\n// } from '@mui/material'\r\n// import React, { useState } from 'react'\r\n// import useAuth from 'app/hooks/useAuth'\r\n// import { useNavigate } from 'react-router-dom'\r\n// import { Box, styled, useTheme } from '@mui/system'\r\n// import { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\n// import { Paragraph, Span } from 'app/components/Typography'\r\n\r\n// const FlexBox = styled(Box)(() => ({\r\n//     display: 'flex',\r\n//     alignItems: 'center',\r\n// }))\r\n\r\n// const JustifyBox = styled(FlexBox)(() => ({\r\n//     justifyContent: 'center',\r\n// }))\r\n\r\n// const ContentBox = styled(Box)(() => ({\r\n//     height: '100%',\r\n//     padding: '32px',\r\n//     position: 'relative',\r\n//     background: 'rgba(0, 0, 0, 0.01)',\r\n// }))\r\n\r\n// const IMG = styled('img')(() => ({\r\n//     width: '100%',\r\n// }))\r\n\r\n// const JWTRoot = styled(JustifyBox)(() => ({\r\n//     background: '#1A2038',\r\n//     minHeight: '100% !important',\r\n//     '& .card': {\r\n//         maxWidth: 800,\r\n//         borderRadius: 12,\r\n//         margin: '1rem',\r\n//     },\r\n// }))\r\n\r\n// const StyledProgress = styled(CircularProgress)(() => ({\r\n//     position: 'absolute',\r\n//     top: '6px',\r\n//     left: '25px',\r\n// }))\r\n\r\n// const JwtLogin = () => {\r\n//     const navigate = useNavigate()\r\n//     const [loading, setLoading] = useState(false)\r\n//     const [userInfo, setUserInfo] = useState({\r\n//         email: 'z@gmail.com',\r\n//         password: 'zzzzzz',\r\n//     })\r\n//     const [message, setMessage] = useState('')\r\n//     const { login } = useAuth()\r\n\r\n//     const handleChange = ({ target: { name, value } }) => {\r\n//         let temp = { ...userInfo }\r\n//         temp[name] = value\r\n//         setUserInfo(temp)\r\n//     }\r\n\r\n//     const { palette } = useTheme()\r\n//     const textError = palette.error.main\r\n//     const textPrimary = palette.primary.main\r\n\r\n//     const handleFormSubmit = async (event) => {\r\n//         setLoading(true)\r\n//         try {\r\n//             await login(userInfo.email, userInfo.password)\r\n//             console.log(userInfo.email, userInfo.password)\r\n//             navigate('/')\r\n//         } catch (e) {\r\n//             console.log(e)\r\n//             setMessage(e.message)\r\n//             setLoading(false)\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <JWTRoot>\r\n//             <Card className=\"card\">\r\n//                 <Grid container>\r\n//                     <Grid item lg={5} md={5} sm={5} xs={12}>\r\n//                         <JustifyBox p={4} height=\"100%\">\r\n//                             <IMG\r\n//                                 src=\"/assets/images/illustrations/dreamer.svg\"\r\n//                                 alt=\"\"\r\n//                             />\r\n//                         </JustifyBox>\r\n//                     </Grid>\r\n//                     <Grid item lg={7} md={7} sm={7} xs={12}>\r\n//                         <ContentBox>\r\n//                             <ValidatorForm onSubmit={handleFormSubmit}>\r\n//                                 <TextValidator\r\n//                                     sx={{ mb: 3, width: '100%' }}\r\n//                                     variant=\"outlined\"\r\n//                                     size=\"small\"\r\n//                                     label=\"Email\"\r\n//                                     onChange={handleChange}\r\n//                                     type=\"email\"\r\n//                                     name=\"email\"\r\n//                                     value={userInfo.email}\r\n//                                     validators={['required', 'isEmail']}\r\n//                                     errorMessages={[\r\n//                                         'this field is required',\r\n//                                         'email is not valid',\r\n//                                     ]}\r\n//                                 />\r\n//                                 <TextValidator\r\n//                                     sx={{ mb: '12px', width: '100%' }}\r\n//                                     label=\"Password\"\r\n//                                     variant=\"outlined\"\r\n//                                     size=\"small\"\r\n//                                     onChange={handleChange}\r\n//                                     name=\"password\"\r\n//                                     type=\"password\"\r\n//                                     value={userInfo.password}\r\n//                                     validators={['required']}\r\n//                                     errorMessages={['this field is required']}\r\n//                                 />\r\n//                                 <FormControlLabel\r\n//                                     sx={{ mb: '12px', maxWidth: 288 }}\r\n//                                     name=\"agreement\"\r\n//                                     onChange={handleChange}\r\n//                                     control={\r\n//                                         <Checkbox\r\n//                                             size=\"small\"\r\n//                                             onChange={({\r\n//                                                 target: { checked },\r\n//                                             }) =>\r\n//                                                 handleChange({\r\n//                                                     target: {\r\n//                                                         name: 'agreement',\r\n//                                                         value: checked,\r\n//                                                     },\r\n//                                                 })\r\n//                                             }\r\n//                                             checked={userInfo.agreement || true}\r\n//                                         />\r\n//                                     }\r\n//                                     label=\"Remeber me\"\r\n//                                 />\r\n\r\n//                                 {message && (\r\n//                                     <Paragraph sx={{ color: textError }}>\r\n//                                         {message}\r\n//                                     </Paragraph>\r\n//                                 )}\r\n\r\n//                                 <FlexBox mb={2} flexWrap=\"wrap\">\r\n//                                     <Box position=\"relative\">\r\n//                                         <Button\r\n//                                             variant=\"contained\"\r\n//                                             color=\"primary\"\r\n//                                             disabled={loading}\r\n//                                             type=\"submit\"\r\n//                                         >\r\n//                                             Sign in\r\n//                                         </Button>\r\n//                                         {loading && (\r\n//                                             <StyledProgress\r\n//                                                 size={24}\r\n//                                                 className=\"buttonProgress\"\r\n//                                             />\r\n//                                         )}\r\n//                                     </Box>\r\n//                                     <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\r\n//                                     <Button\r\n//                                         sx={{ textTransform: 'capitalize' }}\r\n//                                         onClick={() =>\r\n//                                             navigate('/session/signup')\r\n//                                         }\r\n//                                     >\r\n//                                         Sign up\r\n//                                     </Button>\r\n//                                 </FlexBox>\r\n//                                 <Button\r\n//                                     sx={{ color: textPrimary }}\r\n//                                     onClick={() =>\r\n//                                         navigate('/session/forgot-password')\r\n//                                     }\r\n//                                 >\r\n//                                     Forgot password?\r\n//                                 </Button>\r\n//                             </ValidatorForm>\r\n//                         </ContentBox>\r\n//                     </Grid>\r\n//                 </Grid>\r\n//             </Card>\r\n//         </JWTRoot>\r\n//     )\r\n// }\r\n\r\n// export default JwtLogin\r\n","import { generateUtilityClasses, generateUtilityClass } from '@mui/base';\nexport function getFormControlLabelUtilityClasses(slot) {\n  return generateUtilityClass('MuiFormControlLabel', slot);\n}\nconst formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error']);\nexport default formControlLabelClasses;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);\nexport default checkboxClasses;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSwitchBaseUtilityClass(slot) {\n  return generateUtilityClass('PrivateSwitchBase', slot);\n}\nconst switchBaseClasses = generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);\nexport default switchBaseClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"checked\", \"checkedIcon\", \"className\", \"defaultChecked\", \"disabled\", \"disableFocusRipple\", \"edge\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport ButtonBase from '../ButtonBase';\nimport { getSwitchBaseUtilityClass } from './switchBaseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    checked,\n    disabled,\n    edge\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],\n    input: ['input']\n  };\n  return composeClasses(slots, getSwitchBaseUtilityClass, classes);\n};\n\nconst SwitchBaseRoot = styled(ButtonBase)(({\n  ownerState\n}) => _extends({\n  padding: 9,\n  borderRadius: '50%'\n}, ownerState.edge === 'start' && {\n  marginLeft: ownerState.size === 'small' ? -3 : -12\n}, ownerState.edge === 'end' && {\n  marginRight: ownerState.size === 'small' ? -3 : -12\n}));\nconst SwitchBaseInput = styled('input')({\n  cursor: 'inherit',\n  position: 'absolute',\n  opacity: 0,\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  margin: 0,\n  padding: 0,\n  zIndex: 1\n});\n/**\n * @ignore - internal component.\n */\n\nconst SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {\n  const {\n    autoFocus,\n    checked: checkedProp,\n    checkedIcon,\n    className,\n    defaultChecked,\n    disabled: disabledProp,\n    disableFocusRipple = false,\n    edge = false,\n    icon,\n    id,\n    inputProps,\n    inputRef,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    readOnly,\n    required,\n    tabIndex,\n    type,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked'\n  });\n  const muiFormControl = useFormControl();\n\n  const handleFocus = event => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  const handleInputChange = event => {\n    // Workaround for https://github.com/facebook/react/issues/9023\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      // TODO v6: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n\n  let disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  const hasLabelFor = type === 'checkbox' || type === 'radio';\n\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    disableFocusRipple,\n    edge\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SwitchBaseRoot, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(SwitchBaseInput, _extends({\n      autoFocus: autoFocus,\n      checked: checkedProp,\n      defaultChecked: defaultChecked,\n      className: classes.input,\n      disabled: disabled,\n      id: hasLabelFor && id,\n      name: name,\n      onChange: handleInputChange,\n      readOnly: readOnly,\n      ref: inputRef,\n      required: required,\n      ownerState: ownerState,\n      tabIndex: tabIndex,\n      type: type\n    }, type === 'checkbox' && value === undefined ? {} : {\n      value\n    }, inputProps)), checked ? checkedIcon : icon]\n  }));\n}); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SwitchBase;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"className\", \"componentsProps\", \"control\", \"disabled\", \"disableTypography\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useFormControl } from '../FormControl';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport formControlLabelClasses, { getFormControlLabelUtilityClasses } from './formControlLabelClasses';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    labelPlacement,\n    error\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error'],\n    label: ['label', disabled && 'disabled']\n  };\n  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);\n};\n\nexport const FormControlLabelRoot = styled('label', {\n  name: 'MuiFormControlLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${formControlLabelClasses.label}`]: styles.label\n    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  WebkitTapHighlightColor: 'transparent',\n  marginLeft: -11,\n  marginRight: 16,\n  // used for row presentation of radio/checkbox\n  [`&.${formControlLabelClasses.disabled}`]: {\n    cursor: 'default'\n  }\n}, ownerState.labelPlacement === 'start' && {\n  flexDirection: 'row-reverse',\n  marginLeft: 16,\n  // used for row presentation of radio/checkbox\n  marginRight: -11\n}, ownerState.labelPlacement === 'top' && {\n  flexDirection: 'column-reverse',\n  marginLeft: 16\n}, ownerState.labelPlacement === 'bottom' && {\n  flexDirection: 'column',\n  marginLeft: 16\n}, {\n  [`& .${formControlLabelClasses.label}`]: {\n    [`&.${formControlLabelClasses.disabled}`]: {\n      color: theme.palette.text.disabled\n    }\n  }\n}));\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControlLabel'\n  });\n\n  const {\n    className,\n    componentsProps = {},\n    control,\n    disabled: disabledProp,\n    disableTypography,\n    label: labelProp,\n    labelPlacement = 'end'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  const controlProps = {\n    disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    labelPlacement,\n    error: fcs.error\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let label = labelProp;\n\n  if (label != null && label.type !== Typography && !disableTypography) {\n    label = /*#__PURE__*/_jsx(Typography, _extends({\n      component: \"span\",\n      className: classes.label\n    }, componentsProps.typography, {\n      children: label\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(FormControlLabelRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/React.cloneElement(control, controlProps), label]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlLabel;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: theme.palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: theme.palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: theme.palette.action.disabled\n  }\n}));\n\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\n\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\n\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\n\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n\n  const {\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon: iconProp = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"],"sourceRoot":""}