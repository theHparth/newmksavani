{"version":3,"sources":["app/views/admin/filter/FilterTable.js"],"names":["AllStock","React","useState","searchDate","setSearchDate","useSelector","state","filterList","filteredData","dispatch","useDispatch","searchText","setSearchText","useEffect","getallFilteredData","rowsPerPage","setRowsPerPage","page","setPage","sx","mb","variant","color","onSearch","value","onSearchValueChange","dateProjection","length","undefined","title","width","overflow","map","subscriber","index","align","style","fontSize","_id","stockInfo","subscriberIn","index2","itemName","totalQty","px","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onPageChange","event","newPage","onRowsPerPageChange","target"],"mappings":"wOA2KeA,UAtJE,WAEb,MAAkCC,IAAMC,SAAS,IAAjD,mBAAKC,EAAL,KAAiBC,EAAjB,KAEA,EAA4BC,aAAY,SAACC,GAAD,OAAWA,EAAMC,cAAnDC,oBAAN,MAAqB,GAArB,EACMC,EAAWC,cAGjB,EAAkCT,IAAMC,SAAS,IAAjD,mBAAKS,EAAL,KAAiBC,EAAjB,KAMAC,qBAAU,WACN,IAAIP,EAAQ,CAAEK,aAAYR,cAC1BM,EAASK,YAAmBR,MAC7B,CAACG,EAAUN,EAAYQ,IAQ1B,MAAsCV,IAAMC,SAAS,KAArD,mBAAOa,EAAP,KAAoBC,EAApB,KACA,EAAwBf,IAAMC,SAAS,GAAvC,mBAAOe,EAAP,KAAaC,EAAb,KAWA,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,GAAI,CAAEC,GAAI,GAAKC,QAAQ,YAAYC,MAAM,UAAjD,2BAIA,cAAC,IAAD,CACIC,SAlCe,SAACC,GACxBZ,EAAcY,IAkCNC,oBAAqBd,IAGzB,cAAC,IAAD,CAAYe,eAAgB,SAACpB,GAAD,OAAWF,EAAcE,MAE5B,IAAxBE,EAAamB,aAAiCC,IAAjBpB,EAC1B,yDAEA,cAAC,IAAD,CAAYqB,MAAM,cAAlB,SACI,eAAC,IAAD,CAAKC,MAAM,OAAOC,SAAS,OAA3B,UACKvB,EAAawB,KAAI,SAACC,EAAYC,GAAb,OACd,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIC,MAAM,OACNC,MAAO,CAAEC,SAAU,QAFvB,SAIKJ,EAAWK,MAEhB,cAAC,IAAD,CACIH,MAAM,OACNC,MAAO,CAAEC,SAAU,QAFvB,wBAMA,cAAC,IAAD,CACIF,MAAM,OACNC,MAAO,CAAEC,SAAU,QAFvB,6BAQR,cAAC,IAAD,UACKJ,EAAWM,UAAUP,KAClB,SAACQ,EAAcC,GAAf,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAWN,MAAM,OAAjB,SACK,MAEL,cAAC,IAAD,CAAWA,MAAM,OAAjB,SACKK,EAAaE,WAElB,cAAC,IAAD,CAAWP,MAAM,OAAjB,SACKK,EAAaG,aARPF,YA3BzBP,MA8Cd,cAAC,IAAD,CACIf,GAAI,CAAEyB,GAAI,GACVC,mBAAoB,CAAC,GAAI,KACzBC,UAAU,MACVC,MAAOvC,EAAamB,OACpBZ,YAAaA,EACbE,KAAMA,EACN+B,oBAAqB,CACjB,aAAc,iBAElBC,oBAAqB,CACjB,aAAc,aAElBC,aAvFC,SAACC,EAAOC,GAC7BlC,EAAQkC,IAuFYC,oBApFQ,SAACF,GAC7BnC,GAAgBmC,EAAMG,OAAO9B,OAC7BN,EAAQ","file":"static/js/21.41181eaf.chunk.js","sourcesContent":["import {\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TablePagination,\r\n    Button,\r\n} from '@mui/material'\r\nimport React, { useEffect } from 'react'\r\nimport { Box } from '@mui/system'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    SimpleCard,\r\n    ContainerTable,\r\n    StyledTable,\r\n    SearchBox,\r\n    DateChoose,\r\n} from 'app/components'\r\n\r\nimport { getallFilteredData } from 'app/redux/actions/admin/filterAction'\r\n\r\nconst AllStock = () => {\r\n    // for date search\r\n    let [searchDate, setSearchDate] = React.useState({})\r\n\r\n    let { filteredData = [] } = useSelector((state) => state.filterList)\r\n    const dispatch = useDispatch()\r\n\r\n    // search for all\r\n    let [searchText, setSearchText] = React.useState('')\r\n\r\n    const handleChangeSearch = (value) => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        var state = { searchText, searchDate }\r\n        dispatch(getallFilteredData(state))\r\n    }, [dispatch, searchDate, searchText])\r\n\r\n    // useEffect(() => {\r\n    //     filteredData = filteredData.filter((hospi) => {\r\n    //         return hospi._id == searchText\r\n    //     })\r\n    // }, [searchText])\r\n\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(100)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value)\r\n        setPage(0)\r\n    }\r\n\r\n    return (\r\n        <ContainerTable>\r\n            <Button sx={{ mb: 2 }} variant=\"contained\" color=\"primary\">\r\n                Add New Stock\r\n            </Button>\r\n\r\n            <SearchBox\r\n                onSearch={handleChangeSearch}\r\n                onSearchValueChange={searchText}\r\n            />\r\n\r\n            <DateChoose dateProjection={(state) => setSearchDate(state)} />\r\n\r\n            {filteredData.length === 0 || filteredData === undefined ? (\r\n                <h1>No stock data found..!!</h1>\r\n            ) : (\r\n                <SimpleCard title=\"Stocks List\">\r\n                    <Box width=\"100%\" overflow=\"auto\">\r\n                        {filteredData.map((subscriber, index) => (\r\n                            <div key={index}>\r\n                                <StyledTable>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                align=\"left\"\r\n                                                style={{ fontSize: '25px' }}\r\n                                            >\r\n                                                {subscriber._id}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"left\"\r\n                                                style={{ fontSize: '15px' }}\r\n                                            >\r\n                                                Stock Name\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"left\"\r\n                                                style={{ fontSize: '15px' }}\r\n                                            >\r\n                                                Total Qty.\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {subscriber.stockInfo.map(\r\n                                            (subscriberIn, index2) => (\r\n                                                <TableRow key={index2}>\r\n                                                    <TableCell align=\"left\">\r\n                                                        {' '}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"left\">\r\n                                                        {subscriberIn.itemName}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"left\">\r\n                                                        {subscriberIn.totalQty}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )\r\n                                        )}\r\n                                        {/* <TableCell align=\"left\"> </TableCell> */}\r\n                                    </TableBody>\r\n                                </StyledTable>\r\n                            </div>\r\n                        ))}\r\n\r\n                        <TablePagination\r\n                            sx={{ px: 2 }}\r\n                            rowsPerPageOptions={[50, 100]}\r\n                            component=\"div\"\r\n                            count={filteredData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                        {/* {shouldOpenEditorDialog && (\r\n                            <HandleStock\r\n                                handleClose={handleDialogClose}\r\n                                open={shouldOpenEditorDialog}\r\n                            />\r\n                        )}\r\n                        {shouldOpenConfirmationDialog && (\r\n                            <ConfirmationDialog\r\n                                open={shouldOpenConfirmationDialog}\r\n                                onConfirmDialogClose={handleDialogClose}\r\n                                onYesClick={handleConfirmationResponse}\r\n                                text=\"Are you sure to delete?\"\r\n                            />\r\n                        )} */}\r\n                    </Box>\r\n                    {/* {showAlert ? (\r\n                        <MyAlert\r\n                            isOpen={showAlert}\r\n                            typeSeverity={alertType}\r\n                            alrtTextToShow={\r\n                                privatrRoute\r\n                                    ? 'Stock activated successfully'\r\n                                    : alertText\r\n                            }\r\n                        />\r\n                    ) : null} */}\r\n                </SimpleCard>\r\n            )}\r\n        </ContainerTable>\r\n    )\r\n}\r\n\r\nexport default AllStock\r\n"],"sourceRoot":""}